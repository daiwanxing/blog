import{_ as s,o as a,c as n,R as l}from"./chunks/framework.62e38f8b.js";const A=JSON.parse('{"title":"JavaScript 内存管理探秘","description":"JavaScript 垃圾回收（GC）,JavaScript 引用计数,内存生命周期,内存堆和栈,JavaScript 内存泄漏","frontmatter":{"title":"JavaScript 内存管理探秘","description":"JavaScript 垃圾回收（GC）,JavaScript 引用计数,内存生命周期,内存堆和栈,JavaScript 内存泄漏"},"headers":[],"relativePath":"articles/javascript/memory-discover.md","filePath":"articles/javascript/memory-discover.md","lastUpdated":1685341247000}'),o={name:"articles/javascript/memory-discover.md"},p=l(`<h1 id="javascript-内存管理探秘" tabindex="-1">JavaScript 内存管理探秘 <a class="header-anchor" href="#javascript-内存管理探秘" aria-label="Permalink to &quot;JavaScript 内存管理探秘&quot;">​</a></h1><blockquote><p>本译文已征得原作者 <a href="https://github.com/fgerschau" target="_blank" rel="nofollow noopener noreferrer">Felix Gerschau</a> 授权翻译。授权记录可点击<a href="https://github.com/fgerschau/comments/issues/10" target="_blank" rel="nofollow noopener noreferrer">此链接</a>查看。</p><p>如果你想阅读原文，也可点击 <a href="https://felixgerschau.com/javascript-memory-management/" target="_blank" rel="nofollow noopener noreferrer">此链接</a> 查看原文。</p><p>相信你读完后也能对 JS 内存管理有新的见解</p></blockquote><p><img src="https://felixgerschau.com/static/3b4b854ed9762de030a94a9368be7d40/c1b63/javascript-memory-management-cover.png" alt="javscript内存管理"></p><h2 id="摘要" tabindex="-1">摘要 <a class="header-anchor" href="#摘要" aria-label="Permalink to &quot;摘要&quot;">​</a></h2><p>大多数情况下，作为一名 JavaScript 开发者，你可能不需要了解关于内存管理的任何知识。毕竟，javaScript 引擎会自动帮我们去做这些事情。</p><p>然而，有时你总会遇到内存管理相关的问题，例如内存泄露，这时只有当你了解内存分配的工作原理才能知道如何去解决。</p><p>在这篇文章中，我将向你介绍 <strong>内存分配</strong> 和 <strong>垃圾回收</strong> 的工作原理，并且教你如何避免一些常见的内存泄露问题。</p><h2 id="内存生命周期" tabindex="-1">内存生命周期 <a class="header-anchor" href="#内存生命周期" aria-label="Permalink to &quot;内存生命周期&quot;">​</a></h2><p>在 JavaScript 中，当我们创建了变量、函数或者任何你可以想得到的东西，JS 引擎都会对其进行内存分配并且一旦不再需要时对其释放内存。</p><p><strong>分配内存</strong> 是在内存中保留空间的过程，而释放内存是为了腾出空间用于其他目的。</p><p>每次我们给变量赋值或者创建一个函数，内存分配都将经历以下几个阶段：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6846115ab87e4505a902538f82a80f82~tplv-k3u1fbpfcp-zoom-1.image" alt="分配内存的生命周期"></p><ul><li><strong>分配</strong>内存 <ul><li>JavaScript 为我们处理了这件事，它为我们创建的对象分配了需要的内存。</li></ul></li><li><strong>使用</strong>内存 <ul><li>使用内存是我们在代码中明确做的事情：读取和写入内存仅仅只是读取变量和写入变量。</li></ul></li><li><strong>释放</strong>内存 <ul><li>这一步由 JS 引擎处理，一旦分配的内存被释放，它就能被用于新的地方。</li></ul></li></ul><blockquote><p><strong>备注：</strong> 内存管理上下文中的“对象”不仅是 JS 中的对象，还包括了函数以及函数作用域。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">提示</p><p>内存管理上下文中的“对象”不仅是 js 中的对象，还包括了函数以及函数作用域。</p></div><h2 id="内存中的堆和栈" tabindex="-1">内存中的堆和栈 <a class="header-anchor" href="#内存中的堆和栈" aria-label="Permalink to &quot;内存中的堆和栈&quot;">​</a></h2><p>现在我们知道了在 JS 中定义的一切变量都会由 JS 引擎分配内存，一旦我们不再需要它的时候自动进行释放。</p><p>浮现在我脑海里的下一个问题是：数据被存储在了哪里？</p><p>JS 引擎有两个可以存储数据的地方：<strong>堆</strong>和<strong>栈</strong>，栈和堆是 JS 引擎用于将数据存储在不同场合的两种数据结构。</p><h2 id="栈-静态内存分配" tabindex="-1">栈：静态内存分配 <a class="header-anchor" href="#栈-静态内存分配" aria-label="Permalink to &quot;栈：静态内存分配&quot;">​</a></h2><p><img src="https://felixgerschau.com/static/b94165593eb6e02d73039d8b2cfccfdd/c1b63/stack-memory-explained.png" alt="变量是如何存储在栈中"></p><p align="center">所有的值都会被存储在栈中，因为它们都是原始值</p><p>栈是 JS 用来存储静态数据的数据结构，引擎在编译的时候就能确定静态数据的大小。在 JS 中，这包括了<strong>原始值</strong> <em><strong><code>string</code>,<code>number</code>,<code>boolean</code>，<code>null</code> 和 <code>undefined</code></strong></em> 和指向对象和函数<strong>引用</strong>。</p><p>由于引擎知道值的大小不会改变，所以它会为每个值分配固定数量的内存。</p><p>在执行之前分配内存的过程称之为静态内存分配。因为引擎会为那些值分配固定的内存，所以<strong>原始值的大小是有限的</strong>。</p><p><em><strong>分配内存的大小取决于不同的浏览器各自的实现</strong></em>。</p><h2 id="堆-动态内存分配" tabindex="-1">堆：动态内存分配 <a class="header-anchor" href="#堆-动态内存分配" aria-label="Permalink to &quot;堆：动态内存分配&quot;">​</a></h2><p>堆是一个存储数据的不同空间，JS 在其中存储对象和函数。与栈不同，引擎不会为这些对象和函数分配固定的内存空间。相反，将根据需要分配更多的内存空间，这种分配内存的方法也称之为按需分配。</p><p>为了方便对比，下面列出了一个表格比较两种数据结构的区别：</p><table><thead><tr><th>栈</th><th style="text-align:center;">堆</th></tr></thead><tbody><tr><td>原始值和指向对象与函数的引用</td><td style="text-align:center;">对象和函数</td></tr><tr><td>在编译时确定分配内存大小</td><td style="text-align:center;">在运行时确定分配大小</td></tr><tr><td>分配固定的内存</td><td style="text-align:center;">没有大小限制</td></tr></tbody></table><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>让我们来看一些代码案例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pesrson </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p align="center">JS 会为这个 <code>person</code> 对象在堆中分配内存，但是 <code>person</code> 这个变量实际上还是存储在栈中，栈中的变量的值指向的是存储在堆中的引用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> hobbies </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hiking</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">reading</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p align="center">数组和对象同样如此，这就是为什么它们存储在堆中的原因</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// allocates memory for a string</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// allocates memory for a number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John Doe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// allocates memory for a new string</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> firstName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// allocates memory for a new string</span></span></code></pre></div><p align="center">原始值是不可变的，这意味着当你改变原始值话，JS 会创建一个新值覆盖掉旧值。</p><h2 id="javascript-中的引用" tabindex="-1">JavaScript 中的引用 <a class="header-anchor" href="#javascript-中的引用" aria-label="Permalink to &quot;JavaScript 中的引用&quot;">​</a></h2><p>JS 中所有的变量都首先指向栈，如果变量的值是一个非原始值，那么栈中会指向一个在堆中的对象的引用。</p><p>被分配在堆中的内存是不按顺序存储的，这也就是为什么我们需要在栈中保留对堆中的引用。你可以将引用看作成一个个地址，存储在堆中的对象看作为这些地址所属的房屋。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>记住，JS 为<strong>对象和函数</strong>分配的内存都会放在堆中，而<strong>原始值和引用</strong>存储在栈内。（译者注：引用相当于一个指针，指向的是堆中的对象或者函数的地址。）</p></div><p><img src="https://felixgerschau.com/static/b452488bd7eeac0405c48f164da6280d/c1b63/stack-heap-pointers.png" alt="javascript 堆中的引用"></p><p align="center">在这张图中，我们可以看到不同的值是如何被存储的。注意, <code>person</code> 和 <code>new Person</code>实际上指向的是同一个对象。</p><h2 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p align="center">这会在堆中创建了一个新的对象，并且在栈中创建一个指向这个对象的引用。</p><h2 id="垃圾回收-gc" tabindex="-1">垃圾回收（GC） <a class="header-anchor" href="#垃圾回收-gc" aria-label="Permalink to &quot;垃圾回收（GC）&quot;">​</a></h2><p>现在，我们知道了 JS 是如何为各种对象分配内存的，但是如果你还记得上文提到的内存生命周期一图，我们还少了最后一步：释放内存。</p><p>就像内存分配那样，JS 引擎也会为我们处理这一步。更具体的来说，这一步由<strong>垃圾收集器(garbage collector)</strong> 负责处理这个问题。</p><p>一旦 JS 引擎识别到了给定的变量或者函数不再被需要了，那么就会释放其占用的内存。</p><p>听起来似乎很完美，但这里的主要问题在于，内存是否仍然需要是一个不可判定的问题，这意味着不可能有一种算法能够在内存不再需要时精确地收集所有多余的内存。</p><p>一些算法为这个问题提供了一个折中的解决方案。在本节中，我将讨论使用最广泛的两种算法：引用计数算法和标记清除算法。</p><h2 id="引用计数" tabindex="-1">引用计数 <a class="header-anchor" href="#引用计数" aria-label="Permalink to &quot;引用计数&quot;">​</a></h2><p>这是最简单的一种方案，引用计数算法的核心在于收集那些<strong>没有指向它们引用的对象</strong>。</p><p>让我们看看下面的例子：</p><p><video src="https://felixgerschau.com/video/stack-heap-gc-animation.mp4" controls muted loop autoplay="autoplay"></video></p><p>注意，这段视频的结尾只有 <code>hobbies</code> 保留在了堆中，因为只有它被栈中的 <code>hobbies</code> 变量所引用。</p><h2 id="周期" tabindex="-1">周期 <a class="header-anchor" href="#周期" aria-label="Permalink to &quot;周期&quot;">​</a></h2><p>这个算法的核心问题在于它并没有考虑到<strong>循环引用</strong>, 当一个对象或者多个对象相互引用对方，但不能再通过代码访问它们时，就会发生问题。</p><p>先来看一个例子，认识什么是<strong>循环引用</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> son </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> dad </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Johnson</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">son</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dad </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dad</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">dad</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">son </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> son</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">son </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">dad </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span></code></pre></div><p>根据上面的示例，变量<code>son.dad</code> 引用了 <code>dad</code> 对象，同时变量 <code>dad.son</code> 也引用 <code>son</code> 对象。这就是循环引用，互相引用自身。</p><p>代码最后两行各自将变量赋值为 <code>null</code>，想触发引用计数搜集对象（前面我们提到过引用计数关键在于收集那些没有指向它们引用的对象）。</p><p>按理来说 <code>son</code> 和 <code>dad</code> 赋值为 <code>null</code> 后，栈中已经没有任何变量指向堆中的这两个对象了，真实情况并非如此。</p><p><img src="https://felixgerschau.com/static/30c115f91d53d20972287fa05592520c/c1b63/reference-cycle.png" alt="https://felixgerschau.com/static/30c115f91d53d20972287fa05592520c/c1b63/reference-cycle.png"></p><p align="center"><code>son</code>和<code>dad</code>对象在堆中相互指向对方，引用计数算法不会释放分配的内存。我们已经没有任何办法访问这两个对象了。</p><h2 id="标记清除" tabindex="-1">标记清除 <a class="header-anchor" href="#标记清除" aria-label="Permalink to &quot;标记清除&quot;">​</a></h2><p>标记清除算法可以解决循环依赖的问题，它不再是简单的计算给定对象的引用次数，而是检测它们是否可以从根对象上访问。</p><p>如何理解这个<strong>根对象</strong>呢？</p><p>在浏览器中，根对象即<code>window</code>，而在 node runtime 中则是 <code>Global</code>。</p><p><img src="https://felixgerschau.com/static/87b4e1eb66afc84d49da13af8e897367/c1b63/garbage-collectoion-algorithm.png" alt="https://felixgerschau.com/static/87b4e1eb66afc84d49da13af8e897367/c1b63/garbage-collectoion-algorithm.png"></p><p><strong>标记清除</strong>将那些永远无法到达的对象当作垃圾清理（收集），根对象永远不会被收集。</p><blockquote><p>译者注：如何理解<strong>永远无法到达的对象</strong>很重要，&quot;永远无法到达的对象&quot; 指的是 JavaScript 代码中无法通过任何方式（例如变量、函数调用等）访问到的对象。这些对象不再被程序使用，因此可以将其视为垃圾，可以清理回收</p></blockquote><p>这样，循环依赖就变得容易解决了。在前面的例子中，<code>dad</code> 和 <code>son</code> 都不能从根访问。因此，它们都将被标记为垃圾并被收集。</p><p>自 2012 年以来，该算法已在所有现代浏览器中实现。仅对性能和实现进行了改进，但并未对算法的核心思想本身进行改进。</p><h2 id="内存泄露" tabindex="-1">内存泄露 <a class="header-anchor" href="#内存泄露" aria-label="Permalink to &quot;内存泄露&quot;">​</a></h2><p>你已经了解了所有这些关于内存管理的知识，接下来让我们来看看最常见的内存泄漏问题。您会发现，如果了解幕后发生的事情，就可以轻松避免这些问题。</p><h2 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h2><p>将数据存储在全局变量中可能是最常见的内存泄漏类型。例如，在浏览器中，如果您使用 <code>var</code> 而不是 <code>const</code> 或 <code>let</code> 或者完全省略关键字, 那么 JS 引擎会将声明的变量挂载到 <code>window</code> 对象。</p><p>使用 <code>function</code> 关键字定义的函数也会发生同样的情况。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> secondUser </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p align="center">user、secondUser 和 getUser 这三个变量都将挂载到 window 对象。</p><p>这仅适用于在全局范围内定义的变量和函数。如果您想了解更多相关信息，请查看这篇 <a href="https://www.w3schools.com/js/js_scope.asp" target="_blank" rel="nofollow noopener noreferrer">JavaScript 作用域的文章</a>。</p><p>我们可以开启严格模式，避免此类问题。</p><p>除了不小心将变量挂载到根对象外，大多数情况下你可能是故意这样做的。您当然可以使用全局变量，但请确保在不再需要数据时释放空间。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span></code></pre></div><h2 id="被遗忘的定时器和回调函数" tabindex="-1">被遗忘的定时器和回调函数 <a class="header-anchor" href="#被遗忘的定时器和回调函数" aria-label="Permalink to &quot;被遗忘的定时器和回调函数&quot;">​</a></h2><h3 id="遗忘的定时器" tabindex="-1">遗忘的定时器 <a class="header-anchor" href="#遗忘的定时器" aria-label="Permalink to &quot;遗忘的定时器&quot;">​</a></h3><p>忘记清理定时器和回调函数会导致你的应用程序内存使用量不断增加。尤其在 SPA 应用中，动态添加事件侦听器和回调时必须小心。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> object </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> intervalId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// everything used in here can&#39;t be collected</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// until the interval is cleared</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">object</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面的代码会每隔 2 秒 执行一次回调函数，如果你在项目中有出现过这样类似的代码，你可能不需要一直运行它。</p><p>如果不取消该定时器，那么定时器执行的回调函数里的对象将永远不回被执行垃圾回收。所以请确保在不需要的时候清除定时器。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">clearInterval</span><span style="color:#A6ACCD;">(intervalId)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在单页面应用程序中，这点非常重要。即便导航到其他页面，这个定时器仍然会在后台不断调用。</p><h3 id="被遗忘的回调函数" tabindex="-1">被遗忘的回调函数 <a class="header-anchor" href="#被遗忘的回调函数" aria-label="Permalink to &quot;被遗忘的回调函数&quot;">​</a></h3><p>假设你为 button 按钮添加了一个 <code>onclick</code> 方法，后来这个按钮被删除了。</p><p>这种情况下，旧浏览器无法收集 button 的 <code>listener</code> 从而导致内存泄露，但现在，这不再是问题了。</p><p>在现代浏览器中，当 dom 元素从 DOM 树上被移除时，GC 能够收集到注册的监听器。不过，一旦您不再需要事件侦听器，最好删除它们最为稳妥。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> onClick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onClick)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onClick)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#A6ACCD;">(element)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="丢失的-dom-引用" tabindex="-1">丢失的 DOM 引用 <a class="header-anchor" href="#丢失的-dom-引用" aria-label="Permalink to &quot;丢失的 DOM 引用&quot;">​</a></h3><p>这种内存泄露的情况和上一个相似，这发生在当在 JS 中存储 DOM 元素时。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> elements </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">elements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(element)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeAllElements</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">elements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在上面的代码中，我们调用 <code>removeAllElements()</code> 方法从 <code>body</code> 节点移除指定的 button 元素。虽然这些 DOM 元素的确从文档中移除了。但是这些 DOM 节点仍然被 <code>elements</code> 这个数组所引用。所以 GC 无法对其执行收集操作。</p><p>以下是改进后的代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> elements </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">elements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(element)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeAllElements</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">elements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">elements</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在本文中，我总结了 JavaScript 中内存管理的核心概念。</p><p>写这篇文章帮助我理清了一些我不完全理解的概念，我希望这篇文章能很好地概述内存管理在 JavaScript 中的工作原理。</p>`,109),e=[p];function t(c,r,D,y,i,F){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
