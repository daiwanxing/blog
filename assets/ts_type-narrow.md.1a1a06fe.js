import{_ as s,c as a,o as n,a as t}from"./app.3b41cbcc.js";const A=JSON.parse('{"title":"重新认识 typescript","description":"","frontmatter":{},"headers":[{"level":2,"title":"ts 中的类型系统","slug":"ts-中的类型系统","link":"#ts-中的类型系统","children":[]}],"relativePath":"ts/type-narrow.md","lastUpdated":1672296821000}'),e={name:"ts/type-narrow.md"},l=t(`<h1 id="重新认识-typescript" tabindex="-1">重新认识 typescript <a class="header-anchor" href="#重新认识-typescript" aria-hidden="true">#</a></h1><h2 id="ts-中的类型系统" tabindex="-1">ts 中的类型系统 <a class="header-anchor" href="#ts-中的类型系统" aria-hidden="true">#</a></h2><p>typescript 中的类型系统借鉴了数学中的集合的概念，让我先仔细回顾下大学线代课程的集合的概念</p><ul><li>集合是一组元素的组成的无序的结构，集合的基本单位就是元素，这些元素可以是数字、字符、字母。</li><li>集合的操作有并集、补集、交集、差集。</li><li>空集是一个特殊的集合，空集与任意集合的交集总是空集，空集与任意集合的并集是全集.</li></ul><p>在 typescript 中，定义以下的类型</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里的类型SN就是string 和 number 的 supertype，它是类型string和类型number的并集.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 类型SN 同时具有 string 和 number 全部属性.</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将类型string和类型number做交集运算，取出它们公共的属性 作为类型SN, 这里的类型SN得到的其实是一个never类型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 因为 类型string 和 类型 number 并无相交的属性.</span></span>
<span class="line"></span></code></pre></div>`,7),p=[l];function o(r,c,i,y,d,C){return n(),a("div",null,p)}const u=s(e,[["render",o]]);export{A as __pageData,u as default};
