import{_ as s,f as n,h as a,R as l}from"./chunks/framework.0f2d6a02.js";const F=JSON.parse('{"title":"CSS3 新尺寸关键字","description":"","frontmatter":{},"headers":[],"relativePath":"articles/css/unit-keywords.md","lastUpdated":1681048887000}'),o={name:"articles/css/unit-keywords.md"},p=l(`<h1 id="css3-新尺寸关键字" tabindex="-1">CSS3 新尺寸关键字 <a class="header-anchor" href="#css3-新尺寸关键字" aria-label="Permalink to &quot;CSS3 新尺寸关键字&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>这篇文章主要探讨下现代 CSS 中的一些尺寸关键字，可能你已经开始用上了，但是对于原理并不是很了解。也有可能你还从未接触。</p><p>不管怎么样，希望正在阅读这篇文章的你能够有所收获，也希望我写的文章能够清晰易懂。</p><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>CSS 尺寸关键字有如下几个：</p><ul><li>fit-content</li><li>max-content</li><li>min-content</li></ul><p>它们可以适用于 <code>width</code>、<code>height</code>、<code>min-width</code>、<code>min-height</code>、<code>max-width</code>、<code>max-height</code>、<code>flex-basis</code>等。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">width: </span><span style="color:#FFCB6B;">fit-content</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">min-width</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">max-content</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">flex-basis</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">min-content</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre></div><p>这些尺寸关键字和具体的数值（例如 px, rem, vw，%等）不同，它们的尺寸由<strong>内容的大小</strong>来决定。</p><p>听起来似乎有点儿抽象，但好像又不难理解。</p><p>既然是内容的大小，那么 <code>max-content</code> 是否表示盒子的大小由内容的最大尺寸来决定，而 <code>min-content</code> 又是否由内容的最小尺寸来决定呢？</p><p>不急，我们先一个个的了解。</p><h2 id="min-content" tabindex="-1">min-content <a class="header-anchor" href="#min-content" aria-label="Permalink to &quot;min-content&quot;">​</a></h2><p><code>min-content</code> 的意思是盒子的大小由尺寸的最小内容来决定，这个最小的内容指的是一行内容中<strong>英文单词中最长的那个单词</strong>作为盒子的最小尺寸。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2px</span><span style="color:#A6ACCD;"> solid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> min-content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="sze">I bought a macbookAir !</div><p>上面的例子我们可以发现整个盒子的宽度是由盒子里的内容中最长的那个单词的宽决定，这行句子中 <strong>macbookAir</strong> 的单词是最长。所以整个容器的宽就是这个单词所占的字符的宽。</p><p>那如果内容中有中文，会如何处理？</p><p>我们调整 div 中的内容，继续看下面的例子：</p><div class="sze-2">吃了吗</div><p>根据上面的浏览器渲染得到的结果后，不难发现如果盒子的内容只存在中文字符，那么 <code>min-content</code> 尺寸关键字意味着取一个中文字符的大小。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>经实测，如果同时存在英文字符和中文字符情况，哪个最长就取哪个（你可能好奇中文字符最长不也就只有一个字符的宽吗，其实不然。如果中文字符后面接很多中文标点符号，那么最长的字符就是第一个中文字符开始到最后一个标点符号结束）</p></div><h2 id="fit-content" tabindex="-1">fit-content <a class="header-anchor" href="#fit-content" aria-label="Permalink to &quot;fit-content&quot;">​</a></h2><p><code>fit-content</code> 尺寸关键字会让容器的尺寸尽可能的使用可用的空间以<strong>满足内容填满</strong>，但容器的大小最大也不会超过父级的内容尺寸。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2px</span><span style="color:#A6ACCD;"> solid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> fit-content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="exp-1">I love css,typescript and html.</div><p>这里名为 <code>.box</code> 的块级容器根据流的特性，其默认宽度是适应父级的宽度。但是在这里我们声明了 <code>fit-content</code> 尺寸关键字，容器会自动调整到满足内容填满的大小。</p><p>其通俗的理解是内容有多大，容器就有多大。但<strong>这不是绝对</strong>的。</p><p>现在我们定义了一个父元素，包裹了一个名为 <code>.exp-1</code> 的子元素:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exp-wrapper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exp-1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      I love css,typescript and html.I love css,typescript and html.I love</span></span>
<span class="line"><span style="color:#A6ACCD;">      css,typescript and html.</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>样式定义如下：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">exp-wrapper</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2px</span><span style="color:#A6ACCD;"> solid blue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">exp-1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2px</span><span style="color:#A6ACCD;"> solid red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> fit-content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>最终渲染结果如下：</p><div class="exp-wrapper"><div class="exp-1">I love css,typescript and html.I love css,typescript and html.I love css,typescript and html.I love css,typescript and html.</div></div><p>由于子元素的内容太长以至于无法完全一行填满所有内容最终导航文本换行，虽然 <code>fit-content</code> 尽可能的让自身的大小满足于能够填充整行内容的大小。但是自适应内容的大小的前提在于<strong>内容的大小不能超过父级元素的宽高</strong>。</p><p>说到这，你可能会说那 <code>max-content</code> 是不是不管怎么样，都会让容器完全遵循内容的宽高，不产生换行？</p><h2 id="max-content" tabindex="-1">max-content <a class="header-anchor" href="#max-content" aria-label="Permalink to &quot;max-content&quot;">​</a></h2><p>事实的确如此。</p><p>还是上面那个例子，但是我们会将 <code>width: fit-content</code> 改为 <code>width: max-content</code>;</p><div class="exp-wrapper-2"><div class="exp-2">I love css,typescript and html.I love css,typescript and html.I love css,typescript and html.I love css,typescript and html.</div></div><p>现在容器会拼接全力的去满足内容填满一行所需要的宽！这有点类似于 <code>word-wrap: no-wrap</code>。我想内部应该就是这样做的。</p><p>如果说 <code>min-content</code> 尺寸关键字目的取内容中最长的那个词作为宽高，那么 <code>max-content</code> 就是根据内容的大小伸缩宽高，哪怕内容的大小超过自身父级容器的大小。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文总结了现代 CSS 中的三个尺寸关键字用法以及原理，它们可以帮助我们更精确地控制元素的尺寸。</p><ul><li>min-content <ul><li>该值将尝试将元素的尺寸调整为其内容所需的最小尺寸，不考虑设定的最大尺寸。如果元素内容的宽度或高度大于最大尺寸，则该值将返回最大尺寸。</li></ul></li><li>fit-content <ul><li>该值将尝试将元素的尺寸调整为其内容所需的最小尺寸，同时不超过设定的最大尺寸。如果元素内容的宽度或高度大于最大尺寸，则该值将返回最大尺寸。如果内容宽度或高度小于最小尺寸，则该值将返回最小尺寸</li></ul></li><li>max-content <ul><li>该值将尝试将元素的尺寸调整为其内容所需的最大尺寸，不考虑设定的最小尺寸。如果元素内容的宽度或高度小于最小尺寸，则该值将返回最小尺寸。</li></ul></li></ul>`,46),e=[p];function t(c,r,i,d,y,D){return n(),a("div",null,e)}const h=s(o,[["render",t]]);export{F as __pageData,h as default};
