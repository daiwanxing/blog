import{_ as s,c as e,o as n,a}from"./app.257604ca.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"入口函数createApp干了些什么","slug":"入口函数createapp干了些什么","link":"#入口函数createapp干了些什么","children":[]},{"level":2,"title":"defineAsyncComponent 和 import异步引入组件","slug":"defineasynccomponent-和-import异步引入组件","link":"#defineasynccomponent-和-import异步引入组件","children":[]},{"level":2,"title":"setup 函数 使用emit options","slug":"setup-函数-使用emit-options","link":"#setup-函数-使用emit-options","children":[]}],"relativePath":"guide/vue-doc/vue3.md","lastUpdated":1656405918000}'),p={name:"guide/vue-doc/vue3.md"},o=a(`<h2 id="入口函数createapp干了些什么" tabindex="-1">入口函数createApp干了些什么 <a class="header-anchor" href="#入口函数createapp干了些什么" aria-hidden="true">#</a></h2><p>在Vue3中我们如果要创建一个vue应用实例，其代码如下所示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./App.vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> cosnt app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(App)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>那么createApp这个函数到底干了些什么？一起通过打开vue项目的源码来一探究竟, createApp的实现逻辑在 <code>vue-next\\packages\\runtime-dom\\src\\index.ts</code>,</p><h2 id="defineasynccomponent-和-import异步引入组件" tabindex="-1">defineAsyncComponent 和 import异步引入组件 <a class="header-anchor" href="#defineasynccomponent-和-import异步引入组件" aria-hidden="true">#</a></h2><p>vue3 新增了<code>defineAsyncComponent</code>这个API，表示当需要使用组件的时候异步加载一个组件，返回的是组件实例本身，接收一个返回promise的函数。但是我们不能在vue-router4中去使用这个API异步导入组件到路由，<a href="./issue.html">https://github.com/vuejs/vue-router-next/pull/682</a>这里提到，如果在router中使用<code>defineAsyncComponent</code>引入一个异步组件会报警告，因为函数返回的并不是一个promise，或者返回的对象并没有render函数。而<code>defineAsyncComponent</code>仅仅只是返回了这个组件实例对象。</p><h2 id="setup-函数-使用emit-options" tabindex="-1">setup 函数 使用emit options <a class="header-anchor" href="#setup-函数-使用emit-options" aria-hidden="true">#</a></h2><p>setup语法糖如何定义emit options</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineEmit</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> emits </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">defineEmit</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sendMessage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>还有一个<code>defineEmits</code>的API，这个API是在编译的时候会自动导入(<code>defineProps</code>也是编译宏，不需要手动导入, 可能是尤大觉得移除defineEmit会对3.1.*之前的项目会有break change，但是API命名需要和<code>defineProps</code>保持一致（s带复数的形式），所以设计了两个API，其函数签名都是一致的。</p><p>详见RFC<a href="./script-setup.html">https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> emits </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineEmits</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sendMessage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 不需要手动导入</span></span>
<span class="line"></span></code></pre></div>`,12),l=[o];function t(c,r,i,y,D,d){return n(),e("div",null,l)}const F=s(p,[["render",t]]);export{C as __pageData,F as default};
