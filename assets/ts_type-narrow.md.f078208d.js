import{_ as s,c as n,o as a,a as p}from"./app.cf8cb61d.js";const C=JSON.parse('{"title":"重新认识 typescript","description":"","frontmatter":{},"headers":[{"level":2,"title":"ts 中的类型系统","slug":"ts-中的类型系统","link":"#ts-中的类型系统","children":[]}],"relativePath":"ts/type-narrow.md","lastUpdated":1672568083000}'),l={name:"ts/type-narrow.md"},e=p(`<h1 id="重新认识-typescript" tabindex="-1">重新认识 typescript <a class="header-anchor" href="#重新认识-typescript" aria-hidden="true">#</a></h1><h2 id="ts-中的类型系统" tabindex="-1">ts 中的类型系统 <a class="header-anchor" href="#ts-中的类型系统" aria-hidden="true">#</a></h2><p>typescript 中的类型系统借鉴了数学中的集合的概念，让我先仔细回顾下大学线代课程的集合的概念</p><ul><li>集合是一组元素的组成的无序的结构，集合的基本单位就是元素，这些元素可以是数字、字符、字母。</li><li>集合的操作有并集、补集、交集、差集。</li><li>空集是一个特殊的集合，空集与任意集合的交集总是空集，空集与任意集合的并集是全集.</li></ul><p>在 typescript 中，定义以下的类型</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里的类型SN就是string 和 number 的 supertype，它是类型string和类型number的并集.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 类型SN 同时具有 string 和 number 全部属性.</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将类型string和类型number做交集运算，取出它们公共的属性 作为类型SN, 这里的类型SN得到的其实是一个never类型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 因为 类型string 和 类型 number 并无相交的属性.</span></span>
<span class="line"></span></code></pre></div><p>在集合中我们知道空集不属于任意集合，而在 typescript 中<code>never</code>类型同样也是不能被其他任何类型所分配。</p><ul><li><p><code>never</code> 与 其他类型 进行类型交叉 得到的永远是 <code>never</code>。</p></li><li><p><code>never</code> 与其他类型进行联合，得到的永远都是其他的类型。</p></li></ul><p><code>never</code>是 typescript 类型系统中的底端集合，而与之相反的，<code>unknown</code>是 typescript 中的顶端集合.</p><p><code>unknown</code>表示的是任何类型，如果一个变量的类型是<code>unknown</code>，那么它可以被任意其他的类型的变量所分配.<code>unknown</code>此外还具备类型收窄的功能.</p><p>什么是类型收窄？类型收窄会在代码块中的每个 if...else，switch...case 中，根据表达式返回的值的类型判断变量的类型.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// isArray 如果为true， 那么 arg的值的类型会被限定为数组类型</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 在这个代码块, arg已经被收窄成了Array类型</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">arg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,13),o=[e];function t(c,r,i,y,F,d){return a(),n("div",null,o)}const A=s(l,[["render",t]]);export{C as __pageData,A as default};
