import{_ as s,c as l,o as a,a as n}from"./app.cf8cb61d.js";const C=JSON.parse('{"title":"ES-Module Vs CommonJS","description":"","frontmatter":{},"headers":[{"level":2,"title":"ES Module 和 CommonJS模块化的区别","slug":"es-module-和-commonjs模块化的区别","link":"#es-module-和-commonjs模块化的区别","children":[]},{"level":2,"title":"在node中使用es module","slug":"在node中使用es-module","link":"#在node中使用es-module","children":[]},{"level":2,"title":"ES Module","slug":"es-module","link":"#es-module","children":[]},{"level":2,"title":"dynamic import 动态导入","slug":"dynamic-import-动态导入","link":"#dynamic-import-动态导入","children":[]}],"relativePath":"js/module-system.md","lastUpdated":1672135816000}'),o={name:"js/module-system.md"},p=n(`<h1 id="es-module-vs-commonjs" tabindex="-1">ES-Module Vs CommonJS <a class="header-anchor" href="#es-module-vs-commonjs" aria-hidden="true">#</a></h1><p>ES6 带来了ES Module的特性，模块的功能可以让我们更好的解耦代码功能逻辑，共用且不会与其他模块变量命名冲突, 浏览器的模块加载不同于node中的模块加载，浏览器是异步加载各个ESM。</p><ol><li>导入的几种方式</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 导入的是module的默认导出</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> moduleList </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 导入的是module脚本中的命名变量：moduleA</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">moduleA</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 导入的是module的默认导出与命名导出moduleA</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> moduleList</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">moduleA</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 导入的module脚本所有导出（包括默认导出）到 allModule变量中</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> allModule </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>导出的几种方式</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 导出的是一个默认导出foo变量 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> const foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 导出的是一个命名导出bar变量</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重新导出命名导出，从module脚本文件导出moduleA再导出给其他模块</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">moduleA</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重新导出默认的导出,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重新将默认导出命名为命名导出</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">moduleA</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 将命名导出改为默认导出</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sayHi</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重新导出所有的命名导出</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>模块相互依赖</li></ol><p>在commonjs与Es Module中，模块与模块之前相互引用对方所带来的一系列变化是不同的。</p><p>什么是模块与模块相互引用？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bar.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// foo.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./bar.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>可以从上面两段代码看出，执行脚本bar.js第一行代码时, 找到foo.js并执行，执行foo.js，开始导入bar.js并执行。由此可看到两个脚本相互构成了一个模块依赖关系。</p><p>回顾之前学过的知识，在ES Module中同一个脚本一旦被import就会被cache，之后不管import N次都只会取出之前缓存的脚本. 所以在上面这个例子中，并不会构成一个import死循环的关系。</p><p>当执行bar.js时，es module静态加载解析特性，将所有可提升的变量提升到模块最顶层作用域。接着加载foo.js导入bar.js中的api，如果该api已经被初始化则可立即被执行。接着执行foo.js剩余可执行的所有代码后回到bar.js执行剩余的代码。</p><p>一句话总结：一旦某个模块被循环加载，只会输出已经执行了部分，没有执行的不输出。</p><p>在CommonJS中循环依赖也是类似的策略，唯一不同的是commonjs脚本是动态加载的，导出的api不具有变量提升特性。</p><h2 id="es-module-和-commonjs模块化的区别" tabindex="-1">ES Module 和 CommonJS模块化的区别 <a class="header-anchor" href="#es-module-和-commonjs模块化的区别" aria-hidden="true">#</a></h2><p>ES Module是静态导入的，在预解析时就能分析代码，必须写在模块的最顶层，ES Module 导出的是一个只读的副本，如果导出的是一个基本类型的值的变量，那么我们无法对变量的值进行更改，如果导出的是一个对象，那么不能更改对象的引用。而Common JS则相反，在运行时加载文件，而且Common JS允许在各种判断语句中动态require相关模块，ES Module则无法完成。Common JS 的this指向的是当前模块的最顶层，ES Module的this是undefined（ES Module自动开启严格模式，common js不会）。</p><p>此外，commonjs中输出的是一个值的拷贝，一旦模块内部的改变了这个值，则不影响外部的变化。</p><h2 id="在node中使用es-module" tabindex="-1">在node中使用es module <a class="header-anchor" href="#在node中使用es-module" aria-hidden="true">#</a></h2><p>在node版本&gt;= 14，支持使用es module, 需要将文件名命名成<code>.mjs</code>表示是一个es module的文件，或者可以直接在项目的根目录下的package.json文件中，设置<code>type = &quot;module&quot;</code> 表示所有的js文件都是基于es module规范。此外如果想单独在某个文件使用commonjs，可以将该文件命名成<code>.cjs</code>表示一个commonjs module。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>因为es module允许顶级await的特性（ES Modoule的脚本支持异步加载，而cjs加载的脚本必须同步加载），所以不能在cjs文件里直接导入mjs的文件，但是可以在mjs文件里导入cjs的默认导出，不能导出其命名导出。这是因为CJS脚本和ES Module内部执行逻辑不同，CJS脚本只有在执行时才计算它们的命名导出，而ES Module要求在解析脚本时就确定命名的导出。</p></div><h2 id="es-module" tabindex="-1">ES Module <a class="header-anchor" href="#es-module" aria-hidden="true">#</a></h2><p>i<wbr>mport.meta 对象包含了当前模块的信息，在内嵌脚本中，i<wbr>mport.meta.url是文档的链接, 而对于外部脚本，i<wbr>mport.meta.url的值则是脚本的链接</p><p>每一个module都有一个顶级作用域、每个模块的this都是undefined, module会自动开启严格模式。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// commonjs 模块导出语法</span></span>
<span class="line"><span style="color:#89DDFF;">exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">export</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">132</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>现在node.js中也能使用es module，需要后缀名为<code>.mjs</code>的脚本或者在package.json中指定type为module</p><h2 id="dynamic-import-动态导入" tabindex="-1">dynamic import 动态导入 <a class="header-anchor" href="#dynamic-import-动态导入" aria-hidden="true">#</a></h2><p><code>import()</code>表达式加载模块并返回一个promise, 用于实现动态导入</p><p><code>尽管import()看起来像一个函数调用，但它只是一种特殊语法，只是恰好使用了括号（类似于 super()）。因此，我们不能将 import 复制到一个变量中，或者对其使用 call/apply。因为它不是一个函数。</code></p>`,29),e=[p];function t(c,r,y,D,i,F){return a(),l("div",null,e)}const m=s(o,[["render",t]]);export{C as __pageData,m as default};
