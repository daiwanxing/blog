import{_ as s,o as n,c as a,O as l}from"./chunks/framework.6fb48d87.js";const o="/blog/eslint-01.png",p="/blog/eslint-02.png",e="/blog/eslint-03.png",h=JSON.parse('{"title":"eslint 配置指南","description":"","frontmatter":{},"headers":[],"relativePath":"articles/javascript/eslint.md","filePath":"articles/javascript/eslint.md","lastUpdated":1702817214000}'),t={name:"articles/javascript/eslint.md"},c=l(`<h1 id="eslint-配置指南" tabindex="-1">eslint 配置指南 <a class="header-anchor" href="#eslint-配置指南" aria-label="Permalink to &quot;eslint 配置指南&quot;">​</a></h1><p>eslint 在前端工程化方面，有很大的作用，负责保证项目产出的高质量代码，根据 <code>rule</code>，<code>plugin</code>， 分析代码的潜在风险并提示开发者纠正编码方式，让代码更健壮。</p><p>要想系统性的学习 <strong>eslint</strong> 的配置方式，可以访问 <a href="https://eslint.org/" target="_blank" rel="nofollow noopener noreferrer">https://eslint.org/</a> 中的文档一步步学习。</p><p><code>eslint</code> 的配置文件一般需要放置在你项目的根目录，文件名可以是 <code>.eslintrc.js</code> 或者 <code>eslint.config.c?js</code>。当然，有效的 eslint 文件名可不止这些。</p><p>以下是所有的合法的 eslint 配置文件。</p><ul><li><code>.eslintrc.cjs</code></li><li><code>.eslintrc.js</code></li><li><code>.eslintrc.yaml</code></li><li><code>.eslintrc.json </code></li><li><code>.eslintrc.yml</code></li></ul><p>同时，我们还需要在 vscode 中的扩展市场搜索并安装 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="nofollow noopener noreferrer">eslint</a>，这个插件的作用是为了识别项目中的 eslint 配置文件，读取配置文件内的配置项以进行代码检测。</p><p>安装完毕后，跟着插件的 README，我们还需要在 <strong><code>.vscode</code></strong> 目录下新建 <strong><code>settings.json</code></strong> 文件，vscode 会读取这个文件，这个文件可以配置插件的环境。编辑器的设置等等。</p><p>我们在 <strong><code>settings.json</code></strong> 文件中，进行如下设置：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">editor.codeActionsOnSave</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#676E95;font-style:italic;">// 当每次保存代码的时候，修复所有可被自动修复的 eslint 错误</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">source.fixAll.eslint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="配置-eslint" tabindex="-1">配置 eslint <a class="header-anchor" href="#配置-eslint" aria-label="Permalink to &quot;配置 eslint&quot;">​</a></h2><p><code>.eslintrc.js</code></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>目前 eslint 还不支持 esm，所以无法使用 <code>export default</code></p><blockquote><p>Note that ESLint does not support ESM configuration at this time.</p></blockquote></div><h2 id="env" tabindex="-1">env <a class="header-anchor" href="#env" aria-label="Permalink to &quot;env&quot;">​</a></h2><p>env 字段用于配置项目的工作环境可用的全局 API，例如，某个项目是基于 Nodejs 开发的，那自然没有 BOM 和 DOM 两个对象的全局 API。</p><p>为了防止其他开发人员在项目中用到这两个对象的 API，可以将 <code>browser</code> 设置为 <code>false</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">node</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">browser</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>这样，如果有人使用了 <code>window</code> 或者 <code>document</code> 对象。eslint 就会在编辑器中提示并高亮相关的错误代码。</p><p><img src="`+o+'" alt="eslint-code"></p><p>env 中所有合法的属性值，可以点击 <a href="https://eslint.org/docs/latest/use/configure/language-options#specifying-environments" target="_blank" rel="nofollow noopener noreferrer">language-options</a> 查看。</p><h2 id="global" tabindex="-1">global <a class="header-anchor" href="#global" aria-label="Permalink to &quot;global&quot;">​</a></h2><p>在项目中，我们可能用到第三方脚本注入的全局变量，但是由于 eslint 无法识别该全局变量导致会提示 <code>no-undef</code></p><p>例如，安装百度地图 javascript sdk 的时候，我们需要全局访问 <code>BMap</code> 对象。</p><p><img src="'+p+`" alt="eslint-code"></p><p>但是 eslint 发现这是一个未定义的变量，合乎预期的高亮该错误代码。</p><p>但是这个 BMap 对象的确是可以被访问的。有没有办法能让 eslint 识别到这个全局变量呢。</p><p>答案是，YES。 我们可以在 <code>global</code> 字段中配置要使用到的全局变量。配置完成后， eslint 就能识别到 <code>BMap</code> 是一个全局的变量了。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">global</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// global 的属性值可以是 \`readonly\` 或 \`writable\`</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">BMap</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">readonly</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>对于旧版本的 eslint, global 字段的属性值可能是 <code>true</code> 或者 <code>false</code>。其中 <code>true</code> 等同于 <code>writable</code>, <code>false</code> 等同于 <code>readonly</code>。 我们应该摒弃这种旧的写法。</p></div><h2 id="parseroptions" tabindex="-1">parserOptions <a class="header-anchor" href="#parseroptions" aria-label="Permalink to &quot;parserOptions&quot;">​</a></h2><p>ESLint 的底层实现涉及将 JavaScript 代码解析为抽象语法树（AST），然后在 AST 中进行分析和检查以查找可能的问题和错误。具体来说，ESLint 会使用一个名为 Esprima 的默认解析器来解析代码，将其转换为 AST，然后将 AST 提供给规则来进行检查。</p><p>我们可以给解析器传入一些配置项。例如 eslint 默认解析 es5 的语法代码，如果尝试使用 es6+ 的代码，则会解析失败。</p><p>我们可以为 <code>parserOptions</code> 传入 <code>ecmaVersion</code> 指定 eslint 支持解析的 js 语法代码版本。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// ---------</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">ecmaVersion</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2015</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>此外，如果要让 eslint 识别解析 jsx 的语法格式，我们还需要设置 <code>ecmaFeatures: { jsx: true }</code> 以开启 jsx 语法。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// ---------</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">ecmaVersion</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2015</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">ecmaFeatures</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">         </span><span style="color:#F07178;">jsx</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><code>ecmaFeatures</code> 除了可以开启 <code>jsx</code> 让 eslint 识别 jsx 语法外，还可以设置 <code>impliedStrict</code>、<code>globalReturn</code> 等。</p><p>具体的属性含义本文不会细说，可以查看官网文档有详细说明。</p><h2 id="rules" tabindex="-1">rules <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;rules&quot;">​</a></h2><p>eslint 的配置核心是规则，eslint 预设了很多的规则来保证代码的可靠性。</p><p>规则的值可以是</p><ul><li><code>off</code> 或者 <code>0</code>, 表示关闭规则</li><li><code>warn</code> 或者 <code>1</code>， 表示开启规则，当代码未能通过该规则时，代码的下划线展示黄色的波浪线</li><li><code>error</code> 或者 <code>2</code>，表示开启规则，当代码未能通过该规则时，代码的下划线部分展示红色的波浪线</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// ---------</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 对于代码中出现的单引号的，展示错误提示</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">quotes</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>此外，部分规则还支持传入 <code>options</code>，此时, 规则属性的值应该为一个数组。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">no-magic-numbers</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">ignore</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">detectObjects</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>需要注意的是，不同的规则，其 <code>options</code> 也是不同的。</p><h2 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h2><p><code>extends</code> 字段用来继承来自其他的规则、插件和语言选项的共享配置。例如 <code>eslint</code> 内置通用的核心规则插件 <code>eslint:recommended</code>，这样我们就不手动一个个去定义规则了。</p><p><code>extends</code> 属性值可以是一个字符串，也可以是一个字符串数组。属性值一般要求以 <code>eslint-config-*</code> 开头，其中 <code>*</code> 表示 <code>module name</code>。</p><p>当然我们可以省略以 <code>eslint-config</code> 开头的前缀，直接书写成 <code>module name</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint-config-myconfig</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myconfig</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint:recommended</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>如果你在开发一个基于 Vuejs 的项目，你很可能还需要一个 Vue 官方推荐的 eslint 插件， <code>eslint-plugin-vue</code>，这个插件提供一些扩展的基于 Vue 文件的规则</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint:recommended</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">plugin:vue/vue3-strongly-recommended</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="overides" tabindex="-1">overides <a class="header-anchor" href="#overides" aria-label="Permalink to &quot;overides&quot;">​</a></h2><p><code>overides</code> 字段用于对目录下的某些特定的文件配置相关的 rule 或者 parser。</p><p>来看一个示例。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">quotes</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">single</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">overides</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">files</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/src/**/*.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#F07178;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@typescript-eslint/parser</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">   ]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>在上面的一段配置代码中，我们指定了 src 目录下的所有的 ts 文件，让 eslint 使用 <strong><code>@typescript-eslint/parser</code></strong> 作为 <code>parser</code> 来 lint 代码。</p><h2 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;plugin&quot;">​</a></h2><p>所有的 eslint plugin 包名都必须以 <code>eslint-plugin</code> 开头，但是我们在使用这些 eslint 插件的时候，可以省略这个前缀。</p><p>例如使用 <code>eslint-plugin-vue</code> 时，下面的两种写法都是等效的。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">plugins</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span></span>
<span class="line highlighted"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint-plugin-vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>一个 plugin 定义了一组规则、环境和配置。特别要注意的是，要使用插件内定义的规则时，需要以 <code>plugin/name</code> 这样的方式开启/关闭规则。</p><p>例如，对于 <code>eslint-plugin-vue</code> 定义的规则，我们使用该插件的规则时候，需要在规则名前面加上插件的名称。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">plugins</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rules</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">vue/no-arrow-functions-in-watch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">vue/multi-word-component-names</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果去掉规则名称前面的前缀和<code>/</code>，则 eslint 无法识别该规则。因为对于没有前缀的规则名称，eslint 会从自身定义的一套规则里去查有没有该规则。</p><p>不属于 eslint 官方预设的规则就无法被识别。</p><h2 id="parser" tabindex="-1">parser <a class="header-anchor" href="#parser" aria-label="Permalink to &quot;parser&quot;">​</a></h2><p>eslint 最核心的功能就是负责将文件内的 javascript 代码转换成 AST（抽象语法树）去解析代码的格式、代码语法等。</p><p>那么做这个功能的就是 eslint 提供的 parser 接口，eslint 内置的 parser 是 Espree。我们还可以使用其他的 parser，它只需要能够符合 eslint 的parser 接口。</p><p>像下面的 <code>vue-eslint-parser</code> 就是负责解析以 <code>.vue</code> 结尾的文件。 对于 vue 文件内的 <code>&lt;script&gt;</code> 我们而也可以通过设置 <code>parserOptions.parser</code> 来指定解析</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-eslint-parser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 解析 lang=&quot;ts&quot; 的代码</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#FFCB6B;">ts</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@typescript-eslint/parser</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="ignorepatterns" tabindex="-1">ignorePatterns <a class="header-anchor" href="#ignorepatterns" aria-label="Permalink to &quot;ignorePatterns&quot;">​</a></h2><p>对于项目中的某些文件，我们想跳过 eslint 对它们的检查，可以配置 <code>ignorePatterns</code> 字段。告诉 eslint 忽略某些文件。</p><p><code>ignorePatterns</code> 可以是一个 glob 模式的数组，该字段遵循与 <code>.eslintignore</code> 相同的规则。</p><p>需要注意的是, glob 模式是相对于当前的 <code>.eslintrc</code> 配置文件所在的路径。</p><p>在 <code>overrides</code> 字段下使用该配置项无效。</p><p><code>.eslintignore</code> 文件的配置规则优先级要高于此字段。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">ignorePatterns</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/schema/*.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这篇文章，是我对 eslint 目前所掌握的一个总结，一个多人开发的项目必定离不开 eslint 对代码的约束以及代码风险的规避。</p><p>eslint 配置起来并不难，关键是理解每个配置项的作用，多看看官方文档，多练习下相信很快就能学会掌握，让自己的团队开发更加舒服。</p><p>如果你不确定自己的配置文件是否编写有误，最好的办法是 <code>ctrl + j</code> 打开 vscode 的 terminal，点击 <code>OUTPUT</code> 在右侧的下拉框找到 <code>Eslint</code> 可以看到具体的输出信息。</p><p><img src="`+e+'" alt="eslint-code"></p><h2 id="更新" tabindex="-1">更新 <a class="header-anchor" href="#更新" aria-label="Permalink to &quot;更新&quot;">​</a></h2><h3 id="解决-eslinter-配置的规则-在-vue-文件中不生效的问题" tabindex="-1">解决 eslinter 配置的规则 在 <code>.vue</code> 文件中不生效的问题 <a class="header-anchor" href="#解决-eslinter-配置的规则-在-vue-文件中不生效的问题" aria-label="Permalink to &quot;解决 eslinter 配置的规则 在 `.vue` 文件中不生效的问题&quot;">​</a></h3><p>昨天自己搭建了一个 vite 的项目，在项目根目录配置了 <code>.eslintrc.json</code>，并安装使用了 <code>eslint-plugin-vue</code>。但是发现 vue 文件中的代码无法被 linter 检查出毛病。</p><p>例如，我在 <code>main.ts</code> 中有如下代码</p><p><img src="https://i.stack.imgur.com/vZvVC.png" alt="https://i.stack.imgur.com/vZvVC.png"></p><p>linter 检测到了用 <code>var</code> 声明变量，并提示建议改为 <code>let</code> 或者 <code>const</code>，okay 没任何问题。</p><p>但是在 <code>.vue</code> 文件中我写了一段同样的代码，linter 并未检测出来</p><p><img src="https://i.stack.imgur.com/tiwlv.png" alt="https://i.stack.imgur.com/tiwlv.png"></p><p>我已经在 <code>.eslintrc.json</code> 中使用到了 <code>prefer-const</code> 规则，但是该规则似乎不会让 linter 报告 用 var 定义的变量，再加一条规则 <code>no-var</code> 即可解决在 Vue 文件中无法检测的问题。</p>',94),r=[c];function i(D,F,y,d,u,B){return n(),a("div",null,r)}const E=s(t,[["render",i]]);export{h as __pageData,E as default};
