import{_ as s,f as a,h as e,R as l}from"./chunks/framework.0f2d6a02.js";const D=JSON.parse('{"title":"现代 CSS 布局方式 - Flex and Grid","description":"","frontmatter":{},"headers":[],"relativePath":"articles/css/grid-layout.md","lastUpdated":1681048887000}'),n={name:"articles/css/grid-layout.md"},o=l(`<h1 id="现代-css-布局方式-flex-and-grid" tabindex="-1">现代 CSS 布局方式 - Flex and Grid <a class="header-anchor" href="#现代-css-布局方式-flex-and-grid" aria-label="Permalink to &quot;现代 CSS 布局方式 - Flex and Grid&quot;">​</a></h1><h2 id="chapter-flex" tabindex="-1">Chapter - Flex <a class="header-anchor" href="#chapter-flex" aria-label="Permalink to &quot;Chapter - Flex&quot;">​</a></h2><p>从 flex 布局出现一直受广大前端开发者喜爱，这种布局方式足够自由、灵活。</p><p>flex 布局引入 <code>主轴（main axis）</code> 和 <code>纵轴 (cross axis)</code> 的概念， 在不改变 <code>flex-direction</code> 的情况下，主轴也就是所谓的 <code>x轴</code>，而纵轴就是 <code>y</code>轴。</p><p>flex 很多属性都会受主轴、纵轴的位置影响，例如 <code>justify-items</code>等，这个后续会阐述。</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/00-basic-terminology.svg" alt="flex-basic"></p><h3 id="声明一个-flex-容器" tabindex="-1">声明一个 flex 容器 <a class="header-anchor" href="#声明一个-flex-容器" aria-label="Permalink to &quot;声明一个 flex 容器&quot;">​</a></h3><p>使用 <code>display: flex</code> 即可将下面这个 div 元素变为弹性容器。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flex</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* inline-flex */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>弹性容器本身和 block 元素无太大区别，一个是 <code>flex-flow</code>，一个是 <code>block-flow</code>。都会自适应父级容器元素的宽度。</p><p>弹性容器内的每个直接子元素称之为弹性项目（flex-item） 弹性项目默认是没有宽高的。可以通过 <code>width</code>、<code>flex-basis</code> 以及 <code>flex-grow</code> 指定弹性项目的宽。</p><h3 id="flex-basis" tabindex="-1">flex-basis <a class="header-anchor" href="#flex-basis" aria-label="Permalink to &quot;flex-basis&quot;">​</a></h3><p>flex-basis 用于声明弹性项目的宽度，值得单位可以是 <code>%</code>、<code>rem</code>、<code>px</code>等等。既然 width 可以声明 弹性容器的宽度，为什么又需要多定义一个 <code>flex-basis</code>呢？</p><p>首先, <code>flex-basis</code> 和 width 如果同时存在且 <code>flex-basis</code> 的值不为 <code>auto</code>，<code>flex-basis</code> 设置的值的优先级更高。</p><p>其次，在语义上来讲, <code>flex-basis</code> 设置弹性容器的初始大小，<code>width</code> 设置元素的固定宽度。</p><p>最后，<code>flex-basis</code> 和 <code>flex-grow</code> 同时设置会有意想不到的效果。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">main</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">flex-grow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">last-child</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">flex-basis</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这段代码导致最后一个 div 实际渲染的项目尺寸并非预期的 500px，也非 100px, 应该是 <code>500px + 100px / 2 = 550px</code>, 至于为何是这个结果我是根据猜想算出来的，我暂时没有找到任何关于同时设置 <code>flex-basis</code> 和 <code>flex-grow</code> 导致项目尺寸渲染结果的文章。</p><blockquote><p>TODO，希望未来某一天我能知道这个结果</p></blockquote><p><i>参考资料：<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-basics-and-terminology" target="_blank" rel="nofollow noopener noreferrer">https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-basics-and-terminology</a></i></p><h2 id="chapter-grid" tabindex="-1">Chapter - Grid <a class="header-anchor" href="#chapter-grid" aria-label="Permalink to &quot;Chapter - Grid&quot;">​</a></h2><p>Grid 布局我愿意称之为是目前最为强大的布局，它与 flex 布局最大的不同是它是一个二维布局系统，可以控制行与列，可以跨行合并、跨列合并。flex 在它面前要逊色很多。</p><p>Grid 布局有几个需要知道的概念</p><h3 id="_1-grid-container" tabindex="-1">1. Grid Container <a class="header-anchor" href="#_1-grid-container" aria-label="Permalink to &quot;1. Grid Container&quot;">​</a></h3><p>当给一个元素声明为 <code>display: grid</code> 时，这个元素就是所有网格项目的直接父级网格容器</p><h3 id="_2-grid-item" tabindex="-1">2. Grid Item <a class="header-anchor" href="#_2-grid-item" aria-label="Permalink to &quot;2. Grid Item&quot;">​</a></h3><p>Grid 项目是网格容器的子元素，一个网格容器由多个网格项目组成</p><h3 id="_3-grid-line" tabindex="-1">3. Grid Line <a class="header-anchor" href="#_3-grid-line" aria-label="Permalink to &quot;3. Grid Line&quot;">​</a></h3><p>网格与网格之间的分界线被定义为 网格线（Grid Line），网格线可以是垂直的或者水平的线</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/terms-grid-line.svg" alt="Grid-line"></p><h3 id="_4-grid-cell" tabindex="-1">4. Grid Cell <a class="header-anchor" href="#_4-grid-cell" aria-label="Permalink to &quot;4. Grid Cell&quot;">​</a></h3><p>由两条相邻的行网格线和两根相邻的列网格线组成的称之为网格单元</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/terms-grid-cell.svg" alt="Grid-line"></p><h3 id="_5-grid-track" tabindex="-1">5. Grid Track <a class="header-anchor" href="#_5-grid-track" aria-label="Permalink to &quot;5. Grid Track&quot;">​</a></h3><p>两条相邻的网格线的空间称之为网格轨道，下面是第二行的网格线和第三行的网格线所组成的行网格轨道</p><p><img src="https://css-tricks.com/wp-content/uploads/2021/08/terms-grid-track.svg" alt="Grid-Track"></p><h2 id="grid-容器相关的-css-属性" tabindex="-1">Grid 容器相关的 CSS 属性 <a class="header-anchor" href="#grid-容器相关的-css-属性" aria-label="Permalink to &quot;Grid 容器相关的 CSS 属性&quot;">​</a></h2><h3 id="grid-template-rows" tabindex="-1">grid-template-rows <a class="header-anchor" href="#grid-template-rows" aria-label="Permalink to &quot;grid-template-rows&quot;">​</a></h3><p><code>grid-template-rows</code> 定义了网格的行的数量，可使用的值的范围可以是 <code>auto</code>、<code>fr</code>、<code>length</code>、<code>percent</code></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">grid-template-rows</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto </span><span style="color:#F78C6C;">300px</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* 定义了网格拥有 3 行，第一行的行高由该行的内容高度决定，第二行高度300px */</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      如果定义的行的尺寸包含重复的部分，可以使用 repeat 符号进行简化</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      使用 repeat 函数，定义网格的行数为 5 行，每行的高度为 100px</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      repeat(5, 100px)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="sizing-keywords" tabindex="-1">Sizing Keywords <a class="header-anchor" href="#sizing-keywords" aria-label="Permalink to &quot;Sizing Keywords&quot;">​</a></h3><p>在调整网格的行和列的大小时，可以使用所有长度单位，例如 px、rem、% 等，但也可以使用下面的关键字：</p><ul><li>min-content 表示的是内容的最小尺寸，这个最小尺寸以当前这一行句子的某个最长的单词的宽度为参照</li><li>max-content 表示的是内容的最大尺寸，这个最大尺寸就是这行句子的长度</li><li>fit-content 不少于最小内容也不超过最大内容</li><li>auto</li><li>fr</li></ul>`,44),p=[o];function t(c,r,i,d,y,h){return a(),e("div",null,p)}const F=s(n,[["render",t]]);export{D as __pageData,F as default};
