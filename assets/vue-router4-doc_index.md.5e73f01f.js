import{_ as s,c as a,o,a as n}from"./app.cf9fc52c.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"正文","slug":"正文","link":"#正文","children":[]},{"level":2,"title":"如何在compositionAPI 中使用vue-router","slug":"如何在compositionapi-中使用vue-router","link":"#如何在compositionapi-中使用vue-router","children":[]}],"relativePath":"vue-router4-doc/index.md","lastUpdated":1655824529000}'),l={name:"vue-router4-doc/index.md"},p=n(`<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h2><p>vue-router4是随着vue3配套的诞生的官方路由库, 下面总结VueRouter4和VueRouter3的配置区别</p><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-hidden="true">#</a></h2><ol><li><p>所有的函数式导航，例如<code>router.push()/replace()/forward()</code>，调用之后会返回一个期约状态已经变更的promise对象。</p></li><li><p><code>router.push()</code>导航时如果提供了path，则params参数完全被忽略。</p></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// will be ignored, works bad</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// works good</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">/user/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li><code>router.replace()</code>和<code>router.push()</code>唯一的区别是不会创建一个新的历史记录到栈中，只会替换当前路由栈最顶层的历史记录。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">router-link</span><span style="color:#89DDFF;"> :to=&quot;{name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}&quot; </span><span style="color:#C792EA;">replace</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#FFCB6B;">router-link</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> replace: </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">replace</span></span>
<span class="line"></span></code></pre></div><h2 id="如何在compositionapi-中使用vue-router" tabindex="-1">如何在compositionAPI 中使用vue-router <a class="header-anchor" href="#如何在compositionapi-中使用vue-router" aria-hidden="true">#</a></h2><p>本节将介绍vue-router如何搭配组合式api进行开发。</p><p>由于我们无法在setup中访问this，所以也不能像Vue2一样通过<code>this.$router()</code> / <code>this.$route</code>来对路由进行相关的操作。替代的办法就是通过从Vue中导入<code>useRoute</code>和<code>useRouter</code>，<code>useRoute</code>返回的是一个记录了当前路由信息的响应式对象， <code>useRouter</code>返回的是一个操作路由跳转相关的对象。同样的，路由相关的导航守卫，也是通过导入的形式来使用。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onBeforeRouteLeave</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onBeforeRouteUpdate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useRoute</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRouter</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 返回的是一个router对象， 提供了一系列的路由操作的api</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// router.push()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> route </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRoute</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 返回的是一个route对象，记录了当前路由的相关信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(route</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">params)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,11),e=[p];function t(r,c,D,y,F,i){return o(),a("div",null,e)}const C=s(l,[["render",t]]);export{u as __pageData,C as default};
