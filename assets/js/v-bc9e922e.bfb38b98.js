"use strict";(self.webpackChunkfrontend_notes=self.webpackChunkfrontend_notes||[]).push([[841],{6585:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-bc9e922e",path:"/guide/vue-types/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是vue-types?",slug:"什么是vue-types",children:[{level:3,title:"native-validator",slug:"native-validator",children:[]}]},{level:2,title:"custom-validator",slug:"custom-validator",children:[]}],filePathRelative:"guide/vue-types/README.md",git:{updatedTime:1642334081e3}}},9177:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h2 id="什么是vue-types" tabindex="-1"><a class="header-anchor" href="#什么是vue-types" aria-hidden="true">#</a> 什么是vue-types?</h2><p>vue-types是一个定义多个props验证器集合，可以通过vue-types按需导出验证器模块，并支持链式调用，相比于用vue的props类型推荐写法而言更加的便捷。</p><p>这个库是最合适搭配typescript来开发基于vue3的web项目的。</p><p>下载方式 <code>npm i vue-types -D</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//  通过导入单个验证器，获得更加简洁的语法</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> integer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-types&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    props<span class="token operator">:</span> <span class="token punctuation">{</span>\n        age<span class="token operator">:</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n        name<span class="token operator">:</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token string">&quot;dwx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>vue-types 内置了native validator 和 custom validator</p><h3 id="native-validator" tabindex="-1"><a class="header-anchor" href="#native-validator" aria-hidden="true">#</a> native-validator</h3><p>具有validate方法，接收一个函数，期待返回的是一个boolean类型的值</p><h2 id="custom-validator" tabindex="-1"><a class="header-anchor" href="#custom-validator" aria-hidden="true">#</a> custom-validator</h2><p>自定义验证器是一种特殊的工厂函数，可用于描述复杂的验证要求。自定义验证器没有validate方法</p><p>所有带有命名空间的navtive验证器通常都会有一个已经被定义好了的默认值, 如果我们需要禁用掉库给我们定义好的默认值，我们可以在命名空间上设置 <code>VueTypes.sensibleDefaults = false</code>。</p><p>当然我们也可以自定义命名空间验证器的默认值，for example:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>VueTypes<span class="token punctuation">.</span>sensibleDefaults <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token builtin">string</span><span class="token operator">:</span> <span class="token string">&quot;my name is dwx&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>\n    describe<span class="token operator">:</span> VueTypes<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// my name is dwx</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用VueType暴露的createType 方法可以创建一个新的命名空间的vueType实例， 接收一个选项式的参数</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-type&quot;</span>\n\n<span class="token keyword">const</span> PropType <span class="token operator">=</span> <span class="token function">createType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token builtin">string</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token builtin">number</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token builtin">boolean</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    func<span class="token operator">:</span> <span class="token keyword">undefined</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用VueTypes.Extends方法扩展命名空间中验证器，接受一个数组，数组的每一项是一个验证器对象</p>',16),p={render:function(n,s){return e}}}}]);