"use strict";(self.webpackChunkfrontend_notes=self.webpackChunkfrontend_notes||[]).push([[79],{6342:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-3a36ef56",path:"/tool-kit/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"检测一个容器是否出现在视口内",slug:"检测一个容器是否出现在视口内",children:[]}],filePathRelative:"tool-kit/index.md",git:{updatedTime:1625793787e3}}},6211:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const t=(0,e._)("h2",{id:"检测一个容器是否出现在视口内",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#检测一个容器是否出现在视口内","aria-hidden":"true"},"#"),(0,e.Uk)(" 检测一个容器是否出现在视口内")],-1),p=(0,e.Uk)("注意： 目前有更好的现成的API提供我们给某一个元素侦测其是否出现在视口内，例如"),o=(0,e._)("code",null,"element.getBoundingClientRect",-1),l=(0,e.Uk)(),c={href:"https://caniuse.com/?search=getBoundingClientRect",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("兼容性非常可观"),i=(0,e.Uk)("，另外有更加灵活的"),u=(0,e._)("code",null,"Intersection-observer",-1),k=(0,e.Uk)(" API（不需要兼容IE的产品可大胆使用）。"),b=(0,e.uE)('<p>所以我们无需重复的去造一个轮子，而且造好的轮子还不一定能有各个浏览器厂商实现的规范好用。</p><p><code>element.getBoundingClientRect</code> 这个API只能适用于判断一个元素是否出现在’窗口‘的视口内，而无法判断一个元素是否出现在’具有滚动条的容器视口‘内，为此自己手写了一个方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">elementVisibleInContainer</span> <span class="token punctuation">(</span><span class="token parameter">container<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 注意， container需要设置position: relative, el必须是container的定位子级</span>\n        <span class="token keyword">let</span> isVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> containerViewHeight <span class="token operator">=</span> container<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> elOffsetTop <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> elHeight <span class="token operator">=</span> el<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n        <span class="token comment">// 求出滚动的偏移值 + 滚动条所在的视口高度（非窗口视口）</span>\n        <span class="token keyword">let</span> scrollTotal <span class="token operator">=</span> container<span class="token punctuation">.</span>scrollTop <span class="token operator">+</span> containerViewHeight<span class="token punctuation">;</span>\n        <span class="token comment">// 滚动的高度 减去 要判断的元素距离最近的父级的顶部偏移值， 可以得出，容器在视口内可以被&#39;看见&#39;的高度</span>\n        <span class="token keyword">let</span> visibleHeight <span class="token operator">=</span> scrollTotal <span class="token operator">-</span> elOffsetTop<span class="token punctuation">;</span>\n        <span class="token comment">// 视口的高度 - 容器可以被看见的高度， 可以得到容器本可以显示到视口的高度</span>\n        <span class="token keyword">let</span> blank <span class="token operator">=</span> containerViewHeight <span class="token operator">-</span> visibleHeight<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>blank <span class="token operator">&lt;</span> containerViewHeight <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>blank <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> blank <span class="token operator">&lt;</span> containerViewHeight<span class="token punctuation">)</span> <span class="token operator">||</span> blank <span class="token operator">&gt;</span> <span class="token number">0</span>  <span class="token operator">-</span> elHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            isVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> isVisible<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',3),d={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,o,l,(0,e._)("a",c,[r,(0,e.Wm)(a)]),i,u,k]),b],64)}}}}]);