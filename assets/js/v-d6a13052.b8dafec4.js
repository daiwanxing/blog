(self.webpackChunkfrontend_notes=self.webpackChunkfrontend_notes||[]).push([[36],{333:(n,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>e});const e={key:"v-d6a13052",path:"/vue-doc/",title:"Vue2",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Vue2 数组是如何实现数据侦测的",slug:"vue2-数组是如何实现数据侦测的",children:[]},{level:2,title:"Vue中computed 和 watch",slug:"vue中computed-和-watch",children:[]},{level:2,title:"组件的data为什么必须是一个函数 而且 需要return一个对象",slug:"组件的data为什么必须是一个函数-而且-需要return一个对象",children:[]},{level:2,title:"key",slug:"key",children:[]},{level:2,title:"diff",slug:"diff",children:[]},{level:2,title:"diff",slug:"diff-1",children:[]}],filePathRelative:"vue-doc/index.md",git:{updatedTime:1625793787e3,contributors:[{name:"daiwanxing",email:"daiwanxing@antvsion.com",commits:5}]}}},4911:(n,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>p});const e=(0,s(6252).uE)('<h1 id="vue2" tabindex="-1"><a class="header-anchor" href="#vue2" aria-hidden="true">#</a> Vue2</h1><h2 id="vue2-数组是如何实现数据侦测的" tabindex="-1"><a class="header-anchor" href="#vue2-数组是如何实现数据侦测的" aria-hidden="true">#</a> Vue2 数组是如何实现数据侦测的</h2><p>vue2自定义了一些相关的数组的方法（push, pop, splice），放置到data中的数组原型上，每当调用这些方法，转而去调用了vue2自定义的相关方法进行拦截。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>data中的list是一个数组， 第一次访问this.list 会触发def，将自定义的数组方法挂载到数组的原型上</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> originMethods <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n<span class="token keyword">let</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originMethods<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拿到数组的原型，arrayMethods 这个空对象的原型指向数组的原型, arrayMethods是需要挂载到data中的数组的原型上</span>\n\n<span class="token comment">// 自定义数组的方法</span>\n<span class="token punctuation">[</span>\n    <span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;shift&#39;</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 执行原始的数组的方法的操作</span>\n    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">originMethods</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先用原始方法计算得到的值</span>\n    <span class="token function">def</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">originMethods</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//... 加入观察者对象，通知dep更新，返回结果</span>\n        <span class="token keyword">return</span> v<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">def</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key <span class="token punctuation">,</span>val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        value<span class="token operator">:</span> val<span class="token punctuation">,</span>\n        enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        writeable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        configurable<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 将自定义的方法放置到data中数组的原型上</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="vue中computed-和-watch" tabindex="-1"><a class="header-anchor" href="#vue中computed-和-watch" aria-hidden="true">#</a> Vue中computed 和 watch</h2><p>不同点：computed可以缓存上次计算的结果（如果依赖没有被更新，只有当依赖的数据发生了变化才会重新计算），watch是只要被侦测的源的值变更了就会执行回调函数</p><p>相同点：都是Watcher构造出来的实例</p><p>Vue有三个watch， 组件watch，用户watch，computed watch</p><h2 id="组件的data为什么必须是一个函数-而且-需要return一个对象" tabindex="-1"><a class="header-anchor" href="#组件的data为什么必须是一个函数-而且-需要return一个对象" aria-hidden="true">#</a> 组件的data为什么必须是一个函数 而且 需要return一个对象</h2><p>一个组件就是一个vue的实例，即便引入了多个相同的组件，那么也会生成多个实例，倘若data定义为一个普通的原始对象，那么其他组件引入该组件并进行操作时，更改了引入组件的状态，进而会影响到同样也引入了该组件的组件状态。</p><p>本质就是就是相当于，data对象如果直接放到原型上进行操作，那么其他变量操作了原型上的数据会造成数据污染</p><h2 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> key</h2><p>使用v-for循环生成一个列表时，通常需要给每一个item绑定一个key，这是便于在更新DOM时，找出只需要比较上次生成的VDOM不同的key那一个进行更细粒度的更新。</p><h2 id="diff" tabindex="-1"><a class="header-anchor" href="#diff" aria-hidden="true">#</a> diff</h2><p>Vue3 在diff算法中相比vue2增加了静态标记，作用于是给将来会发生变化的地方添加一个flag标记</p><h2 id="diff-1" tabindex="-1"><a class="header-anchor" href="#diff-1" aria-hidden="true">#</a> diff</h2>',18),p={render:function(n,a){return e}}}}]);