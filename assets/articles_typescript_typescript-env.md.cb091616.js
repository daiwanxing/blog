import{_ as s,o as p,c as e,R as t}from"./chunks/framework.62e38f8b.js";const g=JSON.parse('{"title":"搭建一个 Typescript 开发环境","description":"","frontmatter":{},"headers":[],"relativePath":"articles/typescript/typescript-env.md","filePath":"articles/typescript/typescript-env.md","lastUpdated":1686551220000}'),a={name:"articles/typescript/typescript-env.md"},l=t(`<h1 id="搭建一个-typescript-开发环境" tabindex="-1">搭建一个 Typescript 开发环境 <a class="header-anchor" href="#搭建一个-typescript-开发环境" aria-label="Permalink to &quot;搭建一个 Typescript 开发环境&quot;">​</a></h1><p>如果要在项目中用到 typescript，那么搭建一个 typescript 的开发环境是必要的。</p><p>由于 typescript 代码无法直接在浏览器环境或者 Nodejs 中直接被执行，所以需要借助 tsc 编译器将其编译成 js 代码。</p><p>如果你的项目是基于 webpack 构建的，那么你需要下载两个 package</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typescript</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ts-loader</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span></span></code></pre></div><p><code>ts-loader</code> 就是负责如何在 webpack 中处理打包 ts 文件。而 <code>typescript</code> 本身就自带一个 tsc compiler，负责编译 ts 代码生成 js 代码。</p><p>如果你的项目是基于 Vite 构建，Vite 由于天然支持 TS（因为 Vite 内置了 <code>@rollup/plugin-typescript</code> 插件对 Typescript 代码自动进行编译处理）。 你仅需安装 <code>@rollup/plugin-typescript</code> 所依赖的 <code>typescript</code> 即可。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typescript</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span></span></code></pre></div><p>依赖安装完毕后，接下来需要新建一个 <code>tsconfig.json</code> 文件，该文件一般放置在项目的根目录。</p><p>这是一个配置文件，负责告诉 tsc 编译器，如何对项目中的 ts 文件做类型检查以及编译哪些文件。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p><strong>tsconfig.json</strong> 文件是必须的，如果缺少该文件，那么 TypeScript 编译器将无法知道应该如何编译你的 TypeScript 代码。</p></div><p><strong>tsconfig.json</strong> 文件有很多配置字段，具体的配置教程可以点击<a href="/blog/articles/typescript/tsconfig.html">如何配置 tsconfig.json</a>这篇文章阅读。</p><p>最后，我们还需要对 ts 代码配置一些规则，让 lint 工具支持 lint ts 代码，为了团队开发过程中保持一致的开发体验，约束类型的定义规范。</p><p>我们需要安装两个 eslint 插件</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@typescript-eslint/parser</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@typescript-eslint/eslint-plugin</span></span></code></pre></div><p>其中 <code>@typescript-eslint/eslint-plugin</code> 定义了一组 lint 规则 和 环境配置。<code>@typescript-eslint/parser</code> 则负责将 ts 代码转换成 AST 解析代码规则。</p><p>以上，就是一个 ts 项目开发的一些准备工作，Over Done!</p>`,17),n=[l];function o(c,r,i,y,d,C){return p(),e("div",null,n)}const D=s(a,[["render",o]]);export{g as __pageData,D as default};
