import{_ as e,o as a,c as l,O as o}from"./chunks/framework.e9450798.js";const m=JSON.parse('{"title":"rollup 配置项","description":"","frontmatter":{},"headers":[],"relativePath":"articles/plugin/rollup.md","filePath":"articles/plugin/rollup.md","lastUpdated":1719830839000}'),r={name:"articles/plugin/rollup.md"},t=o('<h1 id="rollup-配置项" tabindex="-1">rollup 配置项 <a class="header-anchor" href="#rollup-配置项" aria-label="Permalink to &quot;rollup 配置项&quot;">​</a></h1><h2 id="external" tabindex="-1">external <a class="header-anchor" href="#external" aria-label="Permalink to &quot;external&quot;">​</a></h2><p>在 Rollup 中，<code>external</code> 属性用于指定哪些模块应该被视为外部依赖项而不被打包进最终的输出文件中。</p><p>当你在编写一个使用 Rollup 打包的 JavaScript 应用或库时，通常会依赖其他的库或模块。有些模块可能已经在应用程序的构建环境中存在，或者已经在用户的浏览器或服务器环境中可用，这些模块不需要被打包进最终的输出文件中。相反，你希望在输出文件中创建对这些模块的引用，以便在运行时通过外部依赖项加载它们。</p><h2 id="global" tabindex="-1">global <a class="header-anchor" href="#global" aria-label="Permalink to &quot;global&quot;">​</a></h2><p>当你的项目依赖于一些全局变量，例如在浏览器环境中使用的 jQuery 库或者其他全局对象时，你可以使用 <code>global</code> 属性告诉 Rollup 这些全局变量的名称，以便在打包后的代码中引用它们。</p><p>使用 <code>global</code> 属性的好处是，它允许你在打包过程中引用外部全局变量，而不需要将这些全局变量作为模块的依赖项打包进最终的输出文件中。这对于与已经存在于外部环境中的库或对象进行交互非常有用。</p><p><code>external</code> 属性用于指定哪些模块应该被视为外部依赖项而不被打包进最终的输出文件中。这些模块通常是你在代码中 import 或 require 的外部库或模块。</p><p><code>global</code> 属性用于指定全局变量的名称，这些全局变量已经在外部环境中定义，而你希望在打包后的代码中使用它们。这些全局变量通常是在浏览器环境中定义的库或对象。</p><p>在两种情况下，你都希望在打包后的代码中不包含这些依赖项的实际代码，而是通过引用或访问外部环境来获取它们。这样可以减小最终输出文件的大小，并且允许在运行时动态加载或使用这些外部依赖项。</p><h2 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h2><p>对于打出来的包的格式为 <code>iife</code> 或者 <code>umd</code> 的，是很有必要设置 <code>name</code> 属性。这代表了这个包的全局变量。其他脚本可以通过访问 <code>name</code> 的值来使用包。</p>',12),c=[t];function d(n,p,i,s,u,_){return a(),l("div",null,c)}const b=e(r,[["render",d]]);export{m as __pageData,b as default};
