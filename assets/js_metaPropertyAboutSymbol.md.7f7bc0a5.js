import{_ as e,c as o,o as t,a as l}from"./app.b77d871d.js";const S=JSON.parse('{"title":"元属性编程 - Symbol","description":"","frontmatter":{},"headers":[{"level":2,"title":"ES2015 带来了 Symbol","slug":"es2015-带来了-symbol","link":"#es2015-带来了-symbol","children":[]},{"level":2,"title":"[Symobl.iterator]","slug":"symobl-iterator","link":"#symobl-iterator","children":[]}],"relativePath":"js/metaPropertyAboutSymbol.md","lastUpdated":1677154475000}'),a={name:"js/metaPropertyAboutSymbol.md"},r=l('<h1 id="元属性编程-symbol" tabindex="-1">元属性编程 - Symbol <a class="header-anchor" href="#元属性编程-symbol" aria-hidden="true">#</a></h1><h2 id="es2015-带来了-symbol" tabindex="-1">ES2015 带来了 Symbol <a class="header-anchor" href="#es2015-带来了-symbol" aria-hidden="true">#</a></h2><p>ES2015 (简称 ES6) 为 JavaScript 开发者带来了一个新的基本属性: <code>Symbol</code>。</p><p>本文不会介绍 <code>Symbol</code> 的相关知识以及可用的业务场景，如果您还未了解使用过 <code>Symbol</code>， 建议阅读相关资料后再阅读本文。</p><p>除了在我们的代码内声明自定义的 <code>symbol</code> 外, ES6 还为我们带来了几种内建 Symbol（也称之为通用 Symbol - as well know symbol）。</p><p>这些内建的 symbol 可以让开发者对 JS 语法掌握更多的控制权，甚至改写语言默认的行为，这种能力称之为<strong>元编程</strong>。</p><p>我们在编写业务代码的时候，几乎用不到<strong>元编程</strong>这样的能力，元编程的使用场景更多的是在开发框架、库等方面。（作者本人只在编写业务轮子的时候使用过）。</p><p>JS 内建的 <code>Symbol</code> 属性有长达10多种，下面列举可能常用的几种内建 Symbol</p><ul><li>iterator</li><li>toPrimitive</li><li>replace</li><li>isConcatSpreadable</li><li>hasItance</li><li>search</li><li>split</li><li>toStrintTag</li><li>....</li></ul><h2 id="symobl-iterator" tabindex="-1">[Symobl.iterator] <a class="header-anchor" href="#symobl-iterator" aria-hidden="true">#</a></h2><p>大家有没有想过一个这样一个问题，像 <code>Array</code>，<code>Set</code>，<code>Map</code> 这样的数据类型。我们可以通过 <code>for..in</code>、或者展开运算符 <code>[...new Set()]</code> 遍历对象的值。可是唯独 plain object 却无法这样做到。</p><p>当我们尝试为一个 plain object 进行 <code>[...{}]</code> 得到的会是一个错误信息 <code>Uncaught TypeError: {} is not iterable</code>。</p><p>根据错误信息我们可知，普通对象不能迭代。 但是 <code>Array</code>, <code>Set</code> 等也是对象，为什么它们就能迭代呢？</p><p>究其原因，是因为像 <code>Array</code>，<code>Set</code>，<code>Map</code> 这样的对象内部有个迭代器对象。</p>',14),c=[r];function i(d,s,n,p,m,b){return t(),o("div",null,c)}const h=e(a,[["render",i]]);export{S as __pageData,h as default};
