import{_ as n,c as l,o as p,a,b as s,d as o}from"./app.cf9fc52c.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"链表 (Linked-list)","slug":"链表-linked-list","link":"#链表-linked-list","children":[{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]},{"level":3,"title":"为什么链表大部分场景性能优于数组","slug":"为什么链表大部分场景性能优于数组","link":"#为什么链表大部分场景性能优于数组","children":[]},{"level":3,"title":"链接的种类","slug":"链接的种类","link":"#链接的种类","children":[]}]},{"level":2,"title":"算法","slug":"算法","link":"#算法","children":[{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]}]},{"level":2,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[]}],"relativePath":"guide/algorithms/READM.md","lastUpdated":1657631653000}'),e={name:"guide/algorithms/READM.md"},t=a('<h2 id="链表-linked-list" tabindex="-1">链表 (Linked-list) <a class="header-anchor" href="#链表-linked-list" aria-hidden="true">#</a></h2><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-hidden="true">#</a></h3><p>在JavaScript这门动态语言中，数组这一数据结构的实现在JS层面本质上也是一个Object，因其动态分配size的特性，性能不及静态语言的Array。</p><h3 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-hidden="true">#</a></h3><p>链表是一组节点组成的集合，每一个节点都使用一个对象的引用指向它的后继。指向另一个节点的引用叫链，链表中的每一个节点由头节点和尾节点组成，头节点通常存储数据，尾节点存储后继节点的引用（链表中的最后一个节点的尾节点通常指向一个值为<code>null</code>的节点）。</p><h3 id="为什么链表大部分场景性能优于数组" tabindex="-1">为什么链表大部分场景性能优于数组 <a class="header-anchor" href="#为什么链表大部分场景性能优于数组" aria-hidden="true">#</a></h3><h4 id="插入、删除操作" tabindex="-1">插入、删除操作 <a class="header-anchor" href="#插入、删除操作" aria-hidden="true">#</a></h4><p>在数组中，插入一个元素到数组内的某个位置，都需要重新索引整个数组，（尾部插入则不需要索引整个数组），动态调整数组的长度，这对于一个smaller数组而言这点性能开销可以完全忽略不计，但是数组项足够大的场景下，例如存储某个数组存储了1万条数据，往数组头部插入一个数据后，整个数组将要重新索引，每个数组项的下标都需要进行改变，这是较为耗费时间的，总耗时为O(N), 其中N为数组的长度。</p><p>而对于一个链表而言，没有索引维护的开销，插入某个元素到指定节点，只需要将新元素链接到指定节点后，以及断开指定的节点下一个引用，并将该引用作为新元素的下一个节点，无论链表的节点有多少个，其操作时间永远为O(1)。</p>',9),c=s("blockquote",null,[o("参考链接："),s("a",{herf:"https://medium.com/nerd-for-tech/why-use-a-linked-list-instead-of-an-array-f75cdebaad22"},"Why Use A Linked List Instead Of An Array?")],-1),r=a(`<h3 id="链接的种类" tabindex="-1">链接的种类 <a class="header-anchor" href="#链接的种类" aria-hidden="true">#</a></h3><ol><li><p>单链表 (Single-linked-list)</p><p>第一个节点即为链表的头部，通常也用head元素来定义.</p></li><li><p>双链表 (double-linked-list)</p><p>和单链表不同的是，链表的每一个节点不仅存储了<code>next</code>也同时存储了<code>previous</code>，头节点的<code>previous</code>和尾节点的<code>next</code>为null.</p></li><li><p>循环链表 链表的尾节点的<code>next</code>的引用永远指向头节点.</p></li></ol><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-hidden="true">#</a></h2><h3 id="快速排序" tabindex="-1">快速排序 <a class="header-anchor" href="#快速排序" aria-hidden="true">#</a></h3><p>快排是一种处理大数据集最快的排序算法之一，是一种采用递归算法、分而治之将数据分解成包含较小和较大的不同子序列。</p><p>算法的核心是采用递归，每次切分后将切分的数组第一个元素视作为基准值(pivot)，将比pivot大的值放置在右侧，比它小的放置在左侧。接着再次递归调用当前函数并将切分后的数组传递，当切分到最小个数时，也就是数组的长度为0，则将这些切分后的数组连结起来变成一个有序数组。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 快速排序法</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">qSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">list</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 选择第一个数为基准值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pivot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">list</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">round</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 将小于pivot的值放置在左边，大于Pivot的值置于右边</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">idx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">idx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">idx</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">list</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">idx</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pivot</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">qSort</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pivot</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">qSort</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mockData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> idx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> idx </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> idx</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">mockData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">round</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">qSort</span><span style="color:#A6ACCD;">(mockData))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="二分查找" tabindex="-1">二分查找 <a class="header-anchor" href="#二分查找" aria-hidden="true">#</a></h2>`,8),y=[t,c,r];function F(i,D,A,d,C,h){return p(),l("div",null,y)}const f=n(e,[["render",F]]);export{_ as __pageData,f as default};
