import{_ as s,f as a,h as o,R as n}from"./chunks/framework.0f2d6a02.js";const C=JSON.parse('{"title":"JavaScript 原型链","description":"","frontmatter":{},"headers":[],"relativePath":"articles/javascript/prototype.md","lastUpdated":1680774161000}'),p={name:"articles/javascript/prototype.md"},l=n(`<h1 id="javascript-原型链" tabindex="-1">JavaScript 原型链 <a class="header-anchor" href="#javascript-原型链" aria-label="Permalink to &quot;JavaScript 原型链&quot;">​</a></h1><p>在javaScript中每一个对象都有各自的prototype，借助原型，我们可以访问自身没有拥有但是原型链上拥有的方法和属性实现委托。每一个函数都有一个prototype属性，每一个对象都有__proto__属性（非标准，浏览器私有属性），__proto__指向的事创建该对象的构造函数的原型。</p><p>那么接下来讨论一个老生常谈的问题，当我们在new一个构造函数时，js引擎内部发生了什么？</p><ol><li>new 关键字，意味着对一个函数进行’构造调用‘，首先会创建一个新的对象，新对象的prototype指向了这个构造函数的原型</li><li>执行函数体，构造函数的this指向了新创建的对象</li><li>执行完毕后，如果没有显示return，则return新创建的对象。</li></ol><p>实现一个instanceof吧！</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 例子</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isInstanceOf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isTrue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">  (</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#A6ACCD;">isTrue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isTrue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="js-proto" tabindex="-1">js <strong>proto</strong> <a class="header-anchor" href="#js-proto" aria-label="Permalink to &quot;js __proto__&quot;">​</a></h2><p>__proto__的值必须是对象或者null， 否则会被忽略掉，(本质上__proto__就是一对getter和setter)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 先检查obj自身或者原型链上是否存在同名的属性，此处可以访问到原型链上的__proto__</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 之前提到过__proto__本质上是accessor，对其执行setter，会验证值的类型，如果合法，允许赋值。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 不会在obj对象自身创建同名的__proto__属性。（如果原型链上没有__proto__），则对象自身会创建一个同名的属性。</span></span>
<span class="line"></span></code></pre></div><p><code>__proto__</code>是浏览器的私有属性，过去没有一个方法可以获取到对象的原型，所有各大浏览器厂商在对象身上实现了<code>__proto__</code>获取对象的原型， 从ES6开始该属性已经被更好的<code>getPrototypeOf</code>取代，但是为了兼容性考虑浏览器必须实现<code>__proto__</code>，在非浏览器上该属性是可选的。</p><p><code>__proto__</code>不是一个对象的属性，是<code>Object.prototype</code>的访问器属性。也就是<code>Object.protype</code>属性的getter / setter; <code>__proto__</code>是一种访问<code>[[prototype]]</code>的方式，而不是<code>[[prototype]]</code>本身。</p><ol><li><code>Object.create</code> 创建一个空对象，该对象内部的<code>[[protoType]]</code>会链接到prototype</li></ol>`,12),t=[l];function e(c,r,y,F,D,i){return a(),o("div",null,t)}const A=s(p,[["render",e]]);export{C as __pageData,A as default};
