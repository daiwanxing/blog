import{_ as e,c as t,o,a as i}from"./app.54612d9c.js";const a="/blog/github-pages-step02.png",s="/blog/github-pages-step03.png",p="/blog/github-pages-step04.png",r="/blog/github-pages-step06.png",w=JSON.parse('{"title":"如何使用github-Pages部署Web应用","description":"","frontmatter":{"aside":false},"headers":[],"relativePath":"other/deploy-page/index.md","lastUpdated":1676988893000}'),c={name:"other/deploy-page/index.md"},g=i('<h1 id="如何使用github-pages部署web应用" tabindex="-1">如何使用github-Pages部署Web应用 <a class="header-anchor" href="#如何使用github-pages部署web应用" aria-hidden="true">#</a></h1><p>github-pages是github的一个官方托管工具，可以托管来自Repo中的项目页面.</p><blockquote><p>GitHub Pages is designed to host your personal, organization, or project pages from a GitHub repository.</p></blockquote><p>我们需要登录 github 网站打开一个想要托管页面的Repo, 接着我们需要找到<code>Settings</code>这个menu， 如下图红圈标出的部分。</p><p><img src="https://pic1.zhimg.com/80/v2-1ea883413d38fc8eb5406a6e909d2606_r.jpg" alt=""></p><p>点击<code>Settings</code>后，找到<code>Pages</code>这个菜单， 如下图红圈标出的部分</p><p><img src="'+a+'" alt=""></p><p>在<code>Branch</code>下， 有一句提示</p><blockquote><p>GitHub Pages is currently disabled. Select a source below to enable GitHub Pages for this repository. Learn more.</p></blockquote><p>当前仓库的GitHub-Pages 默认是 disabled，需要手动启用。我们选择一个分支作为github-pages的托管分支，这里我选择的是<code>main</code>分支，选择什么分支看个人的情况而定。</p><p><img src="'+s+'" alt=""></p><p>选择下拉列表的指定分支后，branch下拉框的右侧还有一个下拉框，用于指定分支下的指定目录。默认只有两个值，<code>/root</code> 和 <code>/docs</code>。<code>/root</code>很好理解，就是当前仓库的根目录作为github-pages的托管目录，而<code>/docs</code>指的是当前仓库的<code>/docs</code>文件夹作为github-pages的托管目录，这里默认<code>/root</code>即可。</p><p><img src="'+p+'" alt=""></p><p>接着，点击<code>save</code>按钮即可。</p><p>如果我们不需要指定域名，可以跳过下面的<code>Custom Domain</code>设置。 然后我们可以看到一则部署成功的提示以及部署后的URL，我这里的是 <a href="https://daiwanxing.github.io/daiwanxing/" target="_blank" rel="nofollow noopener noreferrer">https://daiwanxing.github.io/daiwanxing/</a> 可以看到一个Repo就这样部署成功了。</p><p><img src="'+r+'" alt=""></p><p>需要注意的是github-pages服务器只会读取的是你的仓库中的index.html 或者 <code>README.md</code>文件，并且加载<code>index.html</code>文件内的相关脚本以及样式资源。</p><p>如果是使用<code>Vite</code>等构建工具开发的项目，是需要build后生成的dist目录作为github-pages的托管目录，因为build后的<code>dist</code>目录才是你的项目最终的可运行的产物。</p><p>但是我们不可能每次手动run build然后push到远程仓库，这样很繁琐。为此，我们需要借助一些CI/CD的工具，帮我们进行自动打包，自动部署的操作。</p><p>我这里使用的是 <a href="https://www.travis-ci.org/" target="_blank" rel="nofollow noopener noreferrer">travis-ci</a>，具体怎么使用 travis 后续我会继续往下写，当然你也可以不使用<code>travis-ci</code>。也可以用github自带的CI工具。</p><p>在Vite文档中，有一份详细的部署static-site的教程，我们也可以阅读这个教程来操作 <a href="https://vitejs.dev/guide/static-deploy.html#deploying-a-static-site" target="_blank" rel="nofollow noopener noreferrer">deploying-a-static-site</a>。</p><blockquote><p>参考资料: <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site" target="_blank" rel="nofollow noopener noreferrer">https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site</a></p></blockquote>',22),d=[g];function n(h,l,u,b,_,m){return o(),t("div",null,d)}const x=e(c,[["render",n]]);export{w as __pageData,x as default};
