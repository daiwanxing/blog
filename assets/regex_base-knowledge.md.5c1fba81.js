import{_ as e,c as o,o as n,a as s,b as a}from"./app.270f485a.js";const g=JSON.parse('{"title":"探寻正则的基础知识 🎨","description":"","frontmatter":{},"headers":[{"level":2,"title":"如何生成一个正则表达式","slug":"如何生成一个正则表达式","link":"#如何生成一个正则表达式","children":[]},{"level":2,"title":"模糊匹配","slug":"模糊匹配","link":"#模糊匹配","children":[]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[]},{"level":2,"title":"量词","slug":"量词","link":"#量词","children":[]},{"level":2,"title":"字符组","slug":"字符组","link":"#字符组","children":[]}],"relativePath":"regex/base-knowledge.md","lastUpdated":1673577875000}'),l={name:"regex/base-knowledge.md"},p=s(`<h1 id="探寻正则的基础知识-🎨" tabindex="-1">探寻正则的基础知识 🎨 <a class="header-anchor" href="#探寻正则的基础知识-🎨" aria-hidden="true">#</a></h1><h2 id="如何生成一个正则表达式" tabindex="-1">如何生成一个正则表达式 <a class="header-anchor" href="#如何生成一个正则表达式" aria-hidden="true">#</a></h2><p>在 JavaScript 中想要创建一个正则表达式有两种办法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> regex_01 </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">your_regex</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> regex_02 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(your_regex)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>大部分人都会偏好第一种方式，因为代码量更少，可以少敲几个按键，我也同样喜欢第一种方式创建一个正则。正则表达式里的内容可以称之为<code>pattern</code>，该 <code>pattern</code> 负责匹配输入的字符串里的子串。</p><div class="info custom-block"><p class="custom-block-title">提示</p><p>上述两种方式创建的正则表达式并无性能上的区别。</p></div><p>先来一个最为简单的匹配例子, 编写一个正则表达式匹配<code>Hello</code>是否是输入的字符串中的子串</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> input_str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello RegEx!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(input_str)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p>这种精确匹配当然是毫无意义的，我们之所以用正则是因为垂涎它的模糊匹配功能。</p><h2 id="模糊匹配" tabindex="-1">模糊匹配 <a class="header-anchor" href="#模糊匹配" aria-hidden="true">#</a></h2><p>那么什么是模糊匹配？模糊匹配是灵活的，是有条件的对字符串进行匹配的。</p><p>例如我们想匹配子串在输入的字符串中可以出现多次也可以一次都不出现</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> input_str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo bar baz oooh!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">input_str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">o</span><span style="color:#89DDFF;">{1,3}/</span><span style="color:#F78C6C;">g</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;oo&quot;, &quot;ooo&quot;]</span></span>
<span class="line"></span></code></pre></div><p>这里用到了量词<code>{m,n}</code>， 含义是字符<code>o</code>在字符串中至少出现 1 次，最多出现 3 次， 后面的<code>g</code>是修饰符<code>global</code>的缩写, 表示的是全局匹配。</p><p>至于修饰符是何物，看官您先别着急， 后面的章节会拎出来讲下.</p><p>上面的这个正则的可视化的形式如下图所示：</p>`,16),t=a("iframe",{frameborder:"0",width:"100%",height:"120",src:"https://jex.im/regulex/#!embed=true&flags=&re=o%7B1%2C3%7D"},null,-1),c=s(`<p>您也可以在线通过 <a href="https://jex.im/regulex/#" target="_blank" rel="noreferrer">regulex</a> 这个正则的可视化网站进行查看。</p><p>除了形如<code>{m,n}</code>这种量词的模糊匹配，还有限定在某些字符范围内的字符组匹配。</p><p>例如，我想从<code>hello world</code>中仅匹配<code>e</code>,<code>w</code>,<code>d</code>这三个字符, 可以通过<code>/[ewd]/</code>限定匹配的范围，表示匹配一个字符，它可以是&quot;e&quot;、&quot;w&quot;、&quot;d&quot;之一。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> input_str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">input_str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">ewd</span><span style="color:#89DDFF;">]/</span><span style="color:#F78C6C;">g</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;e&quot;, &quot;w&quot;, &quot;d&quot;]</span></span>
<span class="line"></span></code></pre></div><p>如果要限定匹配的范围仅为小写字母，我们可以这样写<code>[a-z]</code>,表示匹配一个字符，字符可以是小写的字母 a-z，如果还要匹配限定范围内的特殊字符，例如<code>/</code>,<code>?</code>，可以使用转义符<code>[\\?\\/a-z]</code>。</p><p>那如果我们想匹配非<code>a-z</code>中的任意其他字符呢？</p><p>可以在方括号中使用<code>^</code>表示排除范围内的字符<code>[^a-z]</code>, 这样就无法匹配<code>a-z</code>中的字符了</p>`,7),r=a("iframe",{frameborder:"0",width:"100%",height:"120",src:"https://jex.im/regulex/#!embed=true&flags=&re=%5B%5Ea-z%5D"},null,-1),d=s('<p>相信你已经见识到了正则中字符组匹配与量词匹配的强大之处了，当然这还只是开胃菜了，咱们接着往下说其他的。</p><h2 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-hidden="true">#</a></h2><h2 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-hidden="true">#</a></h2><h2 id="字符组" tabindex="-1">字符组 <a class="header-anchor" href="#字符组" aria-hidden="true">#</a></h2>',4),i=[p,t,c,r,d];function D(y,C,h,F,_,u){return n(),o("div",null,i)}const b=e(l,[["render",D]]);export{g as __pageData,b as default};
