import{_ as u,o,c as l,z as n,d as C,l as d,V as g,A as _,B as y,r as m,n as h,b as c,H as A,K as f,G as r,a as v,R as F}from"./chunks/framework.62e38f8b.js";import{b,u as B,_ as w,w as k}from"./chunks/base.63991c75.js";import{E as S}from"./chunks/el-button.0133341a.js";import{u as q}from"./chunks/index.4f76fabb.js";const x={},E={class:"page"},T=n("header",null,[n("p",null," Lorem ipsum dolor sit amet consectetur adipisicing elit. Incidunt iure ut animi vero a, inventore dolorem in assumenda maxime est eaque vel aspernatur aliquam porro explicabo tenetur vitae ab quis. ")],-1),P=n("main",null,[n("p",null," Lorem ipsum dolor, sit amet consectetur adipisicing elit. Porro eaque doloremque accusamus molestiae delectus facilis eius, ipsam ratione quibusdam quos, dolor ullam. Non quia, saepe doloremque facere quaerat adipisci mollitia! ")],-1),$=n("footer",null,[n("p",null," Lorem ipsum dolor sit, amet consectetur adipisicing elit. Tempora praesentium ea earum, autem similique deleniti repudiandae ad quae eligendi, atque quaerat in quis maxime minima commodi? Aperiam deserunt voluptatibus porro. ")],-1),N=[T,P,$];function R(t,s){return o(),l("div",E,N)}const V=u(x,[["render",R]]),I=Symbol("rowContextKey"),j=["start","center","end","space-around","space-between","space-evenly"],L=["top","middle","bottom"],z=b({tag:{type:String,default:"div"},gutter:{type:Number,default:0},justify:{type:String,values:j,default:"start"},align:{type:String,values:L,default:"top"}}),K=C({name:"ElRow"}),J=C({...K,props:z,setup(t){const s=t,e=B("row"),D=d(()=>s.gutter);g(I,{gutter:D});const p=d(()=>{const a={};return s.gutter&&(a.marginRight=a.marginLeft=`-${s.gutter/2}px`),a}),i=d(()=>[e.b(),e.is(`justify-${s.justify}`,s.justify!=="start"),e.is(`align-${s.align}`,s.align!=="top")]);return(a,ss)=>(o(),_(f(a.tag),{class:h(c(i)),style:A(c(p))},{default:y(()=>[m(a.$slots,"default")]),_:3},8,["class","style"]))}});var O=w(J,[["__file","/home/runner/work/element-plus/element-plus/packages/components/row/src/row.vue"]]);const G=k(O);const H={class:"has_div"},U={key:0},M={key:1},Q={__name:"_has",setup(t){const[s,e]=q();return(D,p)=>{const i=S,a=G;return o(),l("div",null,[n("div",H,[c(s)?(o(),l("p",U)):(o(),l("article",M))]),r(a,{style:{"margin-top":"10px"}},{default:y(()=>[r(i,{onClick:p[0]||(p[0]=()=>c(e)())},{default:y(()=>[v("切换")]),_:1})]),_:1})])}}},W=F(`<h1 id="css3-新伪类选择器" tabindex="-1">CSS3 新伪类选择器 <a class="header-anchor" href="#css3-新伪类选择器" aria-label="Permalink to &quot;CSS3 新伪类选择器&quot;">​</a></h1><p>emmmm，先复习下什么是伪类选择器。在 CSS 中，伪类选择器一般以冒号 <code>:</code> 开头，并接着紧跟着表示状态或者位置的关键字。</p><p>例如：</p><ul><li><code>:hover</code></li><li><code>:first-child</code></li><li><code>:active</code></li></ul><p>有些伪类选择器，还支持传入特定的参数，用于精确的匹配元素的位置。</p><p>例如：</p><ul><li><code>:nth-child(odd)</code> 表示匹配所有元素出现的位置为奇数</li><li><code>:not(:empty)</code> 表示匹配元素的内容为非空的位置</li></ul><p>这些嘛都不是本文要说的内容，只是做个简单的回顾。</p><p>本文主要聊聊 CSS3 中的几个新的伪类选择器，分别是 <strong><code>:has()</code></strong>、<strong><code>:is()</code></strong>、<strong><code>:where()</code></strong>。</p><h2 id="is" tabindex="-1"><code>:is()</code> <a class="header-anchor" href="#is" aria-label="Permalink to &quot;\`:is()\`&quot;">​</a></h2><p><code>:is()</code> 伪类选择器可以接收<strong>一组选择器</strong>列表作为参数（参数用逗号分隔），并能够选择列表中任意一个可匹配的元素应用样式规则。这个是非常有用的一个伪类选择器，本人已经在项目中使用该选择器很多次，节省了大量 css 样式代码编写。</p><p>来看个例子就能知道为什么如此有用</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在上面这个 html 结构中，如果要选择 header，main 以及 footer 下面的 p 标签，你会如何做？</p><p>大多数人在借助预处理器语言（Scss，Less）的情况下，会编写出这样的代码。</p><div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">header</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">footer</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">footer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样写，当然没问题，但是原生的 <code>:is()</code> 选择器能够更优雅实现</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">:is(</span><span style="color:#FFCB6B;">header</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">footer</span><span style="color:#A6ACCD;">) </span><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*  */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>下面是用 <code>:is()</code> 选择器实现的上面的示例</p>`,19),X=F(`<p>怎么样，看起来是不是很有用呢？</p><p>这里的 <code>is()</code> 伪类选择器会匹配选择器列表中的任意一个可匹配的元素并找到该元素的后代元素 p 应用样式规则。</p><p>需要，注意的是 <code>:is()</code> 选择器的权重值为参数列表中<strong>取权重值最高</strong>的那个。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">:is(</span><span style="color:#89DDFF;">#</span><span style="color:#F78C6C;">app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* 这个 :is 选择器的权重为 100，因为这个参数列表中，id选择器权重值最高 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">警告</p><p><code>:is()</code> 伪类选择器不能接收伪元素作为参数列表。所以这样不行：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;">:is(</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">before</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10em</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">说明</p><p>在 chrome &lt;= 88 版本 之前，可以使用 <code>:webkit-any()</code> 做向后兼容，这个 <code>:-webkit-any</code> 是 <code>:is()</code> 的非标准化版的实现。</p></div><h2 id="where" tabindex="-1"><code>:where()</code> <a class="header-anchor" href="#where" aria-label="Permalink to &quot;\`:where()\`&quot;">​</a></h2><p><code>:where()</code> 选择器的功能和 <code>:is()</code> 一致，唯一的不同在 <strong><code>:where()</code> 权重值永远为 0</strong></p><h2 id="has" tabindex="-1"><code>:has()</code> <a class="header-anchor" href="#has" aria-label="Permalink to &quot;\`:has()\`&quot;">​</a></h2><p><code>:has()</code> 选择器是一个后起之秀的新伪类选择器，目前兼容性还不够好，且由于刚推出没多久，没有非标准化的版本导致无法向后兼容。</p><p>但这不妨碍我们去了解并掌握它。</p><p><code>:has()</code> 能够选择匹配指定后代的<strong>祖先元素</strong>，这个祖先元素很重要，要知道，我们在编写 CSS 选择器的时候从左往右写，思维习惯就是从祖先元素出发找到与之匹配的后代元素并应用样式。</p><p>但是 <code>:has()</code> 选择器能够让我们反过来，从与之匹配的后代元素中为祖先元素应用样式规则。</p><p>来看一个例子。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">article</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-else</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">article</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>我希望如果 div 的后代元素是 article 时，将 div 变为蓝色，如果后代元素是 p 时，将 div 变为 红色。</p><p>在不借助 JS 的情况下，如果没有 <code>:has()</code> 这个还真无法实现，但是好在现在已经有了 <code>:has()</code> 了。</p><p>我们只需要：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">has</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">article</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> blue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">has</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>来看这个示例，点击 toggle 将根据 div 是否有匹配的后代元素来应用样式规则。</p>`,20),Y=F(`<p>这里的意思是，如果 div 的后代有 article 元素，则为 div 的背景颜色置为蓝色。如果 div 的后代有 p 元素，则为 div 的背景颜色置为红色。</p><p>这个伪类选择器搭配 <code>:not()</code>，<code>:empty</code> 等组合起来使用会非常强大。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 表示匹配后代元素 p 元素且内容不为空的 .parent */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">parent</span><span style="color:#A6ACCD;">:p</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">not</span><span style="color:#89DDFF;">(:</span><span style="color:#C792EA;">empty</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1em</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    border-raidus</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">.5em</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p><code>:has()</code> 伪类的优先级计算方法与 <code>:is()</code> 和 <code>:not()</code> 相同：以其参数中具体的选择器进行计算。</p></div><h2 id="浏览器兼容性" tabindex="-1">浏览器兼容性 <a class="header-anchor" href="#浏览器兼容性" aria-label="Permalink to &quot;浏览器兼容性&quot;">​</a></h2><table><thead><tr><th></th><th style="text-align:center;">chrome</th><th>firefox</th><th>safari</th></tr></thead><tbody><tr><td><code>:has()</code></td><td style="text-align:center;"><strong>&gt;=105</strong></td><td>目前仍不支持（<strong>113</strong>）</td><td><strong>&gt;=15.4</strong></td></tr><tr><td><code>:where()</code></td><td style="text-align:center;"><strong>&gt;=88</strong></td><td><strong>&gt;=111</strong></td><td><strong>&gt;=14</strong></td></tr><tr><td><code>:is()</code></td><td style="text-align:center;"><strong>&gt;=88(不包含 <code>-webkit-any</code>)</strong></td><td><strong>&gt;=78(不包含 <code>-webkit-any</code>)</strong></td><td><strong>&gt;=14(不包含 <code>-webkit-any</code>)</strong></td></tr></tbody></table>`,6),ls=JSON.parse('{"title":"CSS3 新伪类选择器","description":"","frontmatter":{},"headers":[],"relativePath":"articles/css/new_pseudo_selector.md","filePath":"articles/css/new_pseudo_selector.md","lastUpdated":1686464984000}'),Z={name:"articles/css/new_pseudo_selector.md"},ts=Object.assign(Z,{setup(t){return(s,e)=>(o(),l("div",null,[W,r(V),X,r(Q),Y]))}});export{ls as __pageData,ts as default};
