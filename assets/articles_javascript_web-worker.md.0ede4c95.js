import{_ as s,f as a,h as n,R as l}from"./chunks/framework.0f2d6a02.js";const C=JSON.parse('{"title":"性能利器之 web-worker","description":"","frontmatter":{},"headers":[],"relativePath":"articles/javascript/web-worker.md","lastUpdated":1680774161000}'),o={name:"articles/javascript/web-worker.md"},p=l(`<h1 id="性能利器之-web-worker" tabindex="-1">性能利器之 web-worker <a class="header-anchor" href="#性能利器之-web-worker" aria-label="Permalink to &quot;性能利器之 web-worker&quot;">​</a></h1><p>web-worker 是一种不算太新的技术，可以让开发者将自己编写的 JS 代码运行在一个单独的子线程中。</p><p>听起来似乎很 cool，因为一些密集型的 cpu 计算以及耗时的任务在 main thread 中长期执行的话极容易造成页面卡死（DOM 渲染被阻塞）。</p><p>来看一个极容易的例子</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// if data.length return a huge number;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> idx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> idx </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> idx</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// 对 data 的每一项进行数据处理</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// 将会是一个十分耗时的操作</span></span>
<span class="line"></span></code></pre></div><p>如果将这些耗时的任务全部放到一个子线程中后台计算。那么主线程就能腾出空间来做更多的事情及时响应用户界面。</p><p>But.... Wait, Javascript 不是一门<strong>单线程语言</strong>吗？为什么又有了子线程呢？</p><p>JavaScript 是一门单线程语言没错，单线程语言最大的特点在于同一个时刻只会有一个任务被处理，不会存在<strong>竞态</strong>的问题。</p><p>但是 <code>web-worker</code> 的诞生并不是说 js 又变成了一门多线程语言了。<code>web worker</code> 允许你创建可以与主线程同时运行的附加执行线程。</p><p>虽然这些工作线程不是 JavaScript 语言本身的一部分，但它们是 Web 平台的一部分，它们提供了一种在后台运行计算密集型任务的方法，而不会阻塞主线程。它们使用消息与主线程进行通信（异步）。</p><p>需要明白的是，本质上在<strong>主线程</strong>中，同一时刻还是只能按顺序一次一次的执行任务。当 <code>web-worker</code> 与主线程通信，主线程执行通信的回调任务进行处理。再接着执行下一个异步任务，这还是单线程语言的特点。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// worker.js</span></span>
<span class="line"><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">send some message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./worker.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// send some message</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="业务落地" tabindex="-1">业务落地 <a class="header-anchor" href="#业务落地" aria-label="Permalink to &quot;业务落地&quot;">​</a></h2><p>在日常的业务开发者，如果你遇到需要处理 I/O 密集型计算的任务所造成的页面卡顿，那你真的应该毫不疑问的切换到 <code>web-worker</code> 中去实现。</p><p>例如，我之前就已经落地过一个切换到 <code>web-worker</code> 实现轨迹巡航的案例。</p><p>当用户在界面上查询一辆车某一段时间内在路上的行驶路线信息时，后台会返回相关的路径报文信息。如果查询的日期区间不算太大还好。</p><p>一旦查询超过半个月甚至一个月，报文点的数量可能长达上十万个数量。这是很可怕的，因为在页面中我还需要对这些数据进行格式化处理，以符合界面所需要的数据格式，再接着操作标记点不断移动。（你可能会问为什么不用 nodejs 做 bbf，别问，小公司没有完好的技术基建）所以有的时候界面会在查询的时候如果还需要响应其他的事件任务会非常卡顿。</p><p>在了解到了 web-worker 后我毫不疑问的切过去了，现在处理数据的速度虽然没有变化，但是由于计算任务全都放在了一个附加线程中，可以让主线程有更多的空间做其他的事情， That&#39;s so amazing!</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>web-worker</code> 很好用，但是也做了诸多的限制，比如不能访问 <code>DOM</code> 和 <code>BOM</code>。</p><p>在 web-worker 中运行的 js 代码可以看作一个沙箱，仅提供了一个纯 javascript 的运行环境。</p><p>至于为什么需要这样设计，肯定是有相关原因的，以下是我总结得到的答案：</p><ul><li>线程安全：<code>DOM</code> 和 <code>BOM</code> API 不是<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8" target="_blank" rel="nofollow noopener noreferrer">线程安全</a>的，这意味着多个 web-worker 线程同时访问它们可能会导致竞争条件或其他同步问题。</li><li>性能：<code>DOM</code> 和 <code>BOM</code> API 通常使用实现低级语言实现的（例如 C 或者 C++，取决于浏览器内核），这可能比在 V8 引擎中运行的 JavaScript 代码慢。如果允许工作线程直接访问 DOM 或 BOM，可能会导致性能问题。</li><li>安全性：允许 web-worker 直接访问 <code>DOM</code> 或 <code>BOM</code> 可能会带来安全风险，因为 web-worker 在与主线程不同的上下文中运行，并且可能会访问或修改敏感数据。</li></ul><p>这种设计可确保工作线程安全、高效和可靠，并且它们可以在后台运行而不会干扰主线程。</p></div><h2 id="在-worker-中引入其他脚本" tabindex="-1">在 worker 中引入其他脚本 <a class="header-anchor" href="#在-worker-中引入其他脚本" aria-label="Permalink to &quot;在 worker 中引入其他脚本&quot;">​</a></h2><p>一般来说，在 web-worker 中尽量不应该依赖其他的脚本，或者依赖尽可能体积的小的脚本以确保在子线程中更快的处理代码计算。</p><p>如果需要引入也不是不可以，通过 <code>importScripts</code> 关键字即可导入一个或多个脚本，这种导入会将脚本内的声明的变量和函数放到 worker 顶级作用域中。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 需要注意的是，这种导入脚本的方式，必须导入的是非模块脚本，否则会无法识别 export 关键字</span></span>
<span class="line"><span style="color:#82AAFF;">importScripts</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./util.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>如果你的确需要 ES2015的 <code>ES Module</code>, 你可以在使用 <code>new Worker()</code> 的时候传入第二个参数， <code>{ type: &quot;module&quot; }</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./worker</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// worker.js</span></span>
<span class="line"><span style="color:#A6ACCD;">impor </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">noop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> from </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lodash-es</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">noop</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>但这种方式直到 2023 年仍然存在兼容性的问题，只适用于较高级别的浏览器（chrome &gt;= 80, safari &gt;= 15），firefox 完全不支持。</p><p>一种可行的方式是借助构建工具（例如 rollup），将指定的 worker 脚本用 iife 进行打包。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//worker.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-module.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">port</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ports</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">MyModule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">func</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi App</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//rollup config</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">worker.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist/worker.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">format</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">iife</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//dist/worker.js (rollup output)</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//MyModule code here, generated by rollup</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">MyModule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">func</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">onconnect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">port</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ports</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi App</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>但这种方法造成代码增加了，因为模块代码也被复制到 worker 中。所以也不算一种最佳的办法。</p><h2 id="结束-worker" tabindex="-1">结束 worker <a class="header-anchor" href="#结束-worker" aria-label="Permalink to &quot;结束 worker&quot;">​</a></h2><p>一旦 worker 不再被需要时，需要关闭该 worker 以防内存中驻留，可以通过 <code>worker.terminate()</code> 关闭 worker。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文介绍了 Web Workers 在JavaScript中的基础概念，包括如何创建和使用 Dedicated Workers 和 Shared Workers，如何使用 postMessage()方法进行线程之间的通信，以及如何使用 Transferable Objects来提高性能。文章还提供了一些实际的例子来演示如何使用Web Workers来处理复杂的计算和避免主线程阻塞。最后，文章还讨论了一些关于Web Workers的限制和注意事项，例如同源策略和浏览器兼容性问题。</p>`,34),e=[p];function t(r,c,y,D,F,i){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
