import{_ as s,f as a,h as n,R as l}from"./chunks/framework.0f2d6a02.js";const o="/blog/eslint-01.png",e="/blog/eslint-02.png",u=JSON.parse('{"title":"eslint 配置指南","description":"","frontmatter":{},"headers":[],"relativePath":"articles/javascript/eslint.md","lastUpdated":1680776871000}'),p={name:"articles/javascript/eslint.md"},t=l(`<h1 id="eslint-配置指南" tabindex="-1">eslint 配置指南 <a class="header-anchor" href="#eslint-配置指南" aria-label="Permalink to &quot;eslint 配置指南&quot;">​</a></h1><p>eslint 在前端工程化方面，有很大的作用，负责保证项目产出的高质量代码，根据 <code>rule</code>，<code>plugin</code>， 分析代码的潜在风险并提示开发者纠正编码方式，让代码更健壮。</p><p>要想系统性的学习 <strong>eslint</strong> 的配置方式，可以访问 <a href="https://eslint.org/" target="_blank" rel="nofollow noopener noreferrer">https://eslint.org/</a> 中的文档一步步学习。</p><p><code>eslint</code> 的配置文件一般需要放置在你项目的根目录，文件名可以是 <code>.eslintrc.js</code> 或者 <code>eslint.config.c?js</code>。当然，有效的 eslint 文件名可不止这些。</p><p>以下是所有的合法的 eslint 配置文件。</p><ul><li><code>.eslintrc.cjs</code></li><li><code>.eslintrc.js</code></li><li><code>.eslintrc.yaml</code></li><li><code>.eslintrc.json </code></li><li><code>.eslintrc.yml</code></li></ul><p>同时，我们还需要在 vscode 中的扩展市场搜索并安装 eslint 插件，这个插件的作用是为了识别项目中的 eslint 配置文件，根据配置文件内的参数，识别编辑 1 机器中具有潜在错误风险的代码，对代码进行高亮标注，并支持鼠标移到具有问题的代码上，显示具体的错误的原因。</p><h2 id="配置-eslint" tabindex="-1">配置 eslint <a class="header-anchor" href="#配置-eslint" aria-label="Permalink to &quot;配置 eslint&quot;">​</a></h2><p><code>.eslintrc.js</code></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>目前 eslint 还不支持 esm，所以无法使用 <code>export default</code></p><blockquote><p>Note that ESLint does not support ESM configuration at this time.</p></blockquote></div><h2 id="env" tabindex="-1">env <a class="header-anchor" href="#env" aria-label="Permalink to &quot;env&quot;">​</a></h2><p>env 字段用于配置项目的工作环境可用的全局 API，例如，某个项目是基于 Nodejs 开发的，那自然没有 BOM 和 DOM 两个对象的全局 API。</p><p>为了防止其他开发人员在项目中用到这两个对象的 API，可以将 <code>browser</code> 设置为 <code>false</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">node</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">browser</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>这样，如果有人使用了 <code>window</code> 或者 <code>document</code> 对象。eslint 就会在编辑器中提示并高亮相关的错误代码。</p><p><img src="`+o+'" alt="eslint-code"></p><p>env 中所有合法的属性值，可以点击 <a href="https://eslint.org/docs/latest/use/configure/language-options#specifying-environments" target="_blank" rel="nofollow noopener noreferrer">language-options</a> 查看。</p><h2 id="global" tabindex="-1">global <a class="header-anchor" href="#global" aria-label="Permalink to &quot;global&quot;">​</a></h2><p>在项目中，我们可能用到第三方脚本注入的全局变量，但是由于 eslint 无法识别该全局变量导致会提示 <code>no-undef</code></p><p>例如，安装百度地图 javascript sdk 的时候，我们需要全局访问 <code>BMap</code> 对象。</p><p><img src="'+e+`" alt="eslint-code"></p><p>但是 eslint 发现这是一个未定义的变量，合乎预期的高亮该错误代码。</p><p>但是这个 BMap 对象的确是可以被访问的。有没有办法能让 eslint 识别到这个全局变量呢。</p><p>答案是，YES。 我们可以在 <code>global</code> 字段中配置要使用到的全局变量。配置完成后， eslint 就能识别到 <code>BMap</code> 是一个全局的变量了。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">global</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// global 的属性值可以是 \`readonly\` 或 \`writable\`</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">BMap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">readonly</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>对于旧版本的 eslint, global 字段的属性值可能是 <code>true</code> 或者 <code>false</code>。其中 <code>true</code> 等同于 <code>writable</code>, <code>false</code> 等同于 <code>readonly</code>。 我们应该摒弃这种旧的写法。</p></div><h2 id="parseroptions" tabindex="-1">parserOptions <a class="header-anchor" href="#parseroptions" aria-label="Permalink to &quot;parserOptions&quot;">​</a></h2><p>ESLint 的底层实现涉及将 JavaScript 代码解析为抽象语法树（AST），然后在 AST 中进行分析和检查以查找可能的问题和错误。具体来说，ESLint 会使用一个名为 Esprima 的默认解析器来解析代码，将其转换为 AST，然后将 AST 提供给规则来进行检查。</p><p>我们可以给解析器传入一些配置项。例如 eslint 默认解析 es5 的语法代码，如果尝试使用 es6+ 的代码，则会解析失败。</p><p>我们可以为 <code>parserOptions</code> 传入 <code>ecmaVersion</code> 指定 eslint 支持解析的 js 语法代码版本。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// ---------</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">ecmaVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2015</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>此外，如果要让 eslint 识别解析 jsx 的语法格式，我们还需要设置 <code>ecmaFeatures: { jsx: true }</code> 以开启 jsx 语法。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// ---------</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">ecmaVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2015</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">ecmaFeatures</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F07178;">jsx</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p><code>ecmaFeatures</code> 除了可以开启 <code>jsx</code> 让 eslint 识别 jsx 语法外，还可以设置 <code>impliedStrict</code>、<code>globalReturn</code> 等。</p><p>具体的属性含义本文不会细说，可以查看官网文档有详细说明。</p><h2 id="rules" tabindex="-1">rules <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;rules&quot;">​</a></h2><p>eslint 的配置核心是规则，eslint 预设了很多的规则来保证代码的可靠性。</p><p>规则的值可以是</p><ul><li>off（0） 关闭规则</li><li>warn（1）开启规则，当代码未能通过该规则时，代码的下划线展示黄色的波浪线</li><li>error（2）开启规则，当代码未能通过该规则时，代码的下划线部分展示红色的波浪线</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// ---------</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 对于代码中出现的单引号的，展示错误提示</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">quotes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>此外，部分规则还接收参数传递，例如</p>`,41),c=[t];function r(i,D,F,y,d,C){return a(),n("div",null,c)}const h=s(p,[["render",r]]);export{u as __pageData,h as default};
