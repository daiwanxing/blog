import{_ as c,o as n,c as p,r as v,b as i,d as r,w as o,e as a,f as t,g as D,T as F,a as _}from"./app.e1b5a037.js";const C={},g={class:"code-block"};function m(l,s){return n(),p("div",g,[v(l.$slots,"default",{},void 0,!0)])}const d=c(C,[["render",m],["__scopeId","data-v-740db116"]]);const A={class:"block"},f={key:0,class:"circle"},h={__name:"transition-example",setup(l){const s=i(!1),e=function(){s.value=!s.value};return(y,u)=>(n(),r(d,null,{default:o(()=>[a("div",A,[a("div",null,[t(F,{name:"scale"},{default:o(()=>[s.value?(n(),p("div",f)):D("",!0)]),_:1})]),a("button",{class:"button",onClick:e},"toggle")])]),_:1}))}},b=c(h,[["__scopeId","data-v-7d1182bd"]]);const T={class:"block"},x={key:0,class:"circle"},B={__name:"transition-example2",setup(l){const s=i(!1),e=function(){s.value=!s.value};return(y,u)=>(n(),r(d,null,{default:o(()=>[a("div",T,[a("div",null,[t(F,{name:"scale"},{default:o(()=>[s.value?(n(),p("div",x)):D("",!0)]),_:1})]),a("button",{class:"button",onClick:e},"toggle")])]),_:1}))}},k=c(B,[["__scopeId","data-v-74be7787"]]),E=_(`<h1 id="深入了解-transition" tabindex="-1">深入了解 Transition <a class="header-anchor" href="#深入了解-transition" aria-hidden="true">#</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h2><p>Transition 是 Vue 提供的一种为元素实现动画过渡的一种方案。它也是 Vue 内置的一个组件。只不过，该组件本身并不会被渲染成一个 DOM 元素，</p><p>以下是一个使用 Transition 组件的案例：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;div v-if=&quot;show&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>上面的模板中，我使用了 <code>v-if</code> 指令动态控制 div 的显示和隐藏。</p><p>此时，如果给 Transition 组件添加一些 props，就可以在 div 显示和隐藏期间设置一些过渡动画效果, 下面是个不错的例子：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Transition</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scale</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">tempalte</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">scale-enter-from</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">scale-leave-to</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scale</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">opacity</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">scale-enter-active</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">scale-leave-active</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">transition</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5s</span><span style="color:#A6ACCD;"> linear</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,8),V=_('<p>上面这个例子，主要是四行 css 的代码控制元素在切换状态时的过渡效果。</p><p>Vue 为过渡动画实现了一系列动画编排的预定义类名，如下图所示：</p><p><img src="https://vuejs.org/assets/transition-classes.f0f7b3c9.png" alt="transition-classes"></p><p>其中 <code>v</code> 是表示过渡动画的前缀名称，</p><div class="info custom-block"><p class="custom-block-title">说明</p><p><code>&lt;Transition&gt;</code> 接收一个名为 <code>name</code> 的 props。如果用户没有指定，则默认值为 <code>v</code>。</p></div><p>一个元素从显示到页面，到最终从页面上消失，分为两个阶段：</p><ul><li>enter</li><li>leave</li></ul><p>我们可以把一个 DOM 元素想象成一名演员，演员从上台表演（这里的舞台可以想象成页面） 到谢幕需要经历六个步骤：</p><ul><li>从幕后开始做准备</li><li>缓缓走向舞台</li><li>开始表演</li><li>表演结束，开始准备离场</li><li>缓缓离开舞台</li><li>回到幕后</li></ul><p>这六个步骤正好对应着上图中一系列预定义的过渡类。</p><ul><li>从幕后开始做准备 （v-enter-from）</li><li>缓缓走向舞台 （v-enter-active）</li><li>开始表演 (v-enter-to)</li><li>表演结束，开始准备离场 (v-leave-from)</li><li>缓缓离开舞台 (v-leave-active)</li><li>回到幕后 (v-leave-to)</li></ul><p>我们可以借助这些预设的过渡类来完成一个我们想要的为元素过渡的动画效果。</p><p>例如我们想要实现一个这样的动画编排效果</p><ol><li>入场前，元素相对于自身 Y 轴偏移 -100%，border-radius: 50%</li><li>入场中，设置元素的过渡时间，缓动函数，比如 cubic-bezier(0.68, -0.55, 0.265, 1.55) .5s</li><li>入场完毕，transform: scale(2);</li><li>离场中，设置元素的过渡时间，缓动函数，比如 cubic-bezier(0.68, -0.55, 0.265, 1.55) .5s</li><li>离场后，元素相对于自身 Y 轴偏移 -100%，border-radius: 50%</li></ol><p>下面的示例就是上述动画编排后的样子：</p>',15),$=JSON.parse('{"title":"深入了解 Transition","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]}],"relativePath":"Vue/transition.md","lastUpdated":1678238701000}'),S={name:"Vue/transition.md"},I=Object.assign(S,{setup(l){return(s,e)=>(n(),p("div",null,[E,t(b),V,t(k)]))}});export{$ as __pageData,I as default};
